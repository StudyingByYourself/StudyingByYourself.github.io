<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>x86_64搭建arm环境</title>
    <url>/zhoukaiqi/arm-virtual-machine/</url>
    <content><![CDATA[<h6 id="1-安装arm交叉编译工具链">1.安装arm交叉编译工具链</h6>
<p>安装交叉编译工具链 <code>gcc-aarch64-linux-gnu</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure>
<p>建立软链接，否则后面执行的时候会报动态库找不到的错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/aarch64-linux-gnu/lib/libc.so.6 /lib/libc.so.6</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.1 /lib/ld-linux-aarch64.so.1</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h6 id="2-安装arm模拟器qemu">2.安装arm模拟器qemu</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qemu</span><br></pre></td></tr></table></figure>
<p>编译<code>a.out</code>并执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zkq@zkq-vm:~$ aarch64-linux-gnu-gcc main.c</span><br><span class="line">zkq@zkq-vm:~$ file a.out</span><br><span class="line">a.out: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, <span class="keyword">for</span> GNU/Linux 3.7.0, BuildID[sha1]=6ef0ca0c6462e038e589b6e1d52220a680007588, not stripped</span><br><span class="line">zkq@zkq-vm:~$ qemu-aarch64 a.out</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
<h6 id="3-通过gdb调试arm程序">3.通过gdb调试arm程序</h6>
<p>gdb调试arm程序的原理：qemu端作为gdb server启动可执行程序，另一端作为gdb client连接gdb server，进行本地远程调试。</p>
<p>首先安装多平台的gdb工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gdb-multiarch</span><br></pre></td></tr></table></figure>
<p>重新编译示例代码<code>main.c</code>，注意，这次加上了参数<code>--static</code>。加上这个参数后，生成的可执行文件为静态链接的。<strong>如果不加这个参数，gdb调试的时候单步执行功能不正常，符号表也找不到。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aarch64-linux-gnu-gcc --static -g main.c</span><br></pre></td></tr></table></figure>
<p>通过下面的命令启动可执行程序<code>a.out</code>, 选项<code>-g</code>指明了gdb的监听端口，这里选择的是1234。该指令运行后，当前窗口会被阻塞住。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-aarch64 -g 1234 a.out</span><br></pre></td></tr></table></figure>
<p>新开一个命令行窗口，启动gdb client，进入gdb交互界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-multiarch a.out</span><br></pre></td></tr></table></figure>
<p>在gdb交互界面输入以下内容就可以连接到server端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">target remote localhost:1234</span><br></pre></td></tr></table></figure>
<p>接下来，就可以正常使用gdb的相关功能调试程序了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) b main</span><br><span class="line">Breakpoint 1 at 0x102e8: file main.c, line 5.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at main.c:5</span><br><span class="line">5	    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>assembly</category>
      </categories>
  </entry>
  <entry>
    <title>x86_84常见汇编指令</title>
    <url>/zhoukaiqi/assembly-x86_64/</url>
    <content><![CDATA[<p>x86_84常见汇编指令</p>
<table>
<thead>
<tr>
<th><strong>指令</strong></th>
<th></th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>lea</td>
<td>leaq a(b, c, d), %rax</td>
<td>先计算地址a + b + c * d，然后把最终地址载到寄存器rax中</td>
</tr>
<tr>
<td>shr</td>
<td>$0x4, %rdi</td>
<td>rdi &gt;&gt; 4</td>
</tr>
<tr>
<td>mov</td>
<td>mov    %rax,-0x10(%rbp)</td>
<td>将rax载入rbp-16的地址，变型：movb, movq, movl, movq, movabs</td>
</tr>
</tbody>
</table>
<p>保存入参的寄存器：<code>rdi, rsi, rdx, rcx, r8, r9</code> 依次对应第一、二、三、四、五、六个参数</p>
<p>保存返回值的寄存器： <code>rax</code></p>
<span id="more"></span>
<p>编译选项需添加<code>-fno-omit-frame-pointer</code>，否则rbp不作为栈帧寄存器使用，无法推栈。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -Q --<span class="built_in">help</span>=optimizers -O2 | grep frame</span><br><span class="line">-fomit-frame-pointer                  [enabled]</span><br></pre></td></tr></table></figure>
<p>以demo.c为例，分析x86_64下的汇编指令。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FuncC</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0x900C</span>;</span><br><span class="line">    <span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="string">&#x27;c&#x27;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    b = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取消栈保护编译选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -fno-stack-protector -g demo.c -o demo</span><br></pre></td></tr></table></figure>
<h6 id="1-完整指令">1. 完整指令</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncC</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> FuncC:</span><br><span class="line">   0x000055555555471a &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x000055555555471b &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x000055555555471e &lt;+4&gt;:     sub    <span class="variable">$0x60</span>,%rsp</span><br><span class="line">   0x0000555555554722 &lt;+8&gt;:     movl   <span class="variable">$0x900c</span>,-0x4(%rbp)</span><br><span class="line">   0x0000555555554729 &lt;+15&gt;:    mov    <span class="variable">$0x8</span>,%edi</span><br><span class="line">   0x000055555555472e &lt;+20&gt;:    callq  0x5555555545f0 &lt;malloc@plt&gt;</span><br><span class="line">   0x0000555555554733 &lt;+25&gt;:    mov    %rax,-0x10(%rbp)</span><br><span class="line">   0x0000555555554737 &lt;+29&gt;:    movabs <span class="variable">$0x6f57206f6c6c6548</span>,%rax</span><br><span class="line">   0x0000555555554741 &lt;+39&gt;:    mov    <span class="variable">$0x21646c72</span>,%edx</span><br><span class="line">   0x0000555555554746 &lt;+44&gt;:    mov    %rax,-0x30(%rbp)</span><br><span class="line">   0x000055555555474a &lt;+48&gt;:    mov    %rdx,-0x28(%rbp)</span><br><span class="line">   0x000055555555474e &lt;+52&gt;:    movl   <span class="variable">$0x0</span>,-0x20(%rbp)</span><br><span class="line">   0x0000555555554755 &lt;+59&gt;:    movq   <span class="variable">$0x0</span>,-0x60(%rbp)</span><br><span class="line">   0x000055555555475d &lt;+67&gt;:    movq   <span class="variable">$0x0</span>,-0x58(%rbp)</span><br><span class="line">   0x0000555555554765 &lt;+75&gt;:    movq   <span class="variable">$0x0</span>,-0x50(%rbp)</span><br><span class="line">   0x000055555555476d &lt;+83&gt;:    movq   <span class="variable">$0x0</span>,-0x48(%rbp)</span><br><span class="line">   0x0000555555554775 &lt;+91&gt;:    movq   <span class="variable">$0x0</span>,-0x40(%rbp)</span><br><span class="line">   0x000055555555477d &lt;+99&gt;:    lea    -0x60(%rbp),%rax</span><br><span class="line">   0x0000555555554781 &lt;+103&gt;:   mov    <span class="variable">$0x64</span>,%edx</span><br><span class="line">   0x0000555555554786 &lt;+108&gt;:   mov    <span class="variable">$0x63</span>,%esi</span><br><span class="line">   0x000055555555478b &lt;+113&gt;:   mov    %rax,%rdi</span><br><span class="line">   0x000055555555478e &lt;+116&gt;:   callq  0x5555555545e0 &lt;memset@plt&gt;</span><br><span class="line">   0x0000555555554793 &lt;+121&gt;:   mov    -0x10(%rbp),%rax</span><br><span class="line">   0x0000555555554797 &lt;+125&gt;:   mov    %rax,%rdi</span><br><span class="line">   0x000055555555479a &lt;+128&gt;:   callq  0x5555555545c0 &lt;free@plt&gt;</span><br><span class="line">   0x000055555555479f &lt;+133&gt;:   movq   <span class="variable">$0x0</span>,-0x10(%rbp)</span><br><span class="line">   0x00005555555547a7 &lt;+141&gt;:   mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x00005555555547ac &lt;+146&gt;:   leaveq</span><br><span class="line">   0x00005555555547ad &lt;+147&gt;:   retq</span><br></pre></td></tr></table></figure>
<h6 id="2-push开栈">2. push开栈</h6>
<p>开栈大小 = 96字节，rsp是栈顶，rbp是栈底。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x000055555555471a &lt;+0&gt;:     push   %rbp</span><br><span class="line">0x000055555555471b &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">0x000055555555471e &lt;+4&gt;:     sub    <span class="variable">$0x60</span>,%rsp</span><br><span class="line">(gdb) i r <span class="variable">$rsp</span> <span class="variable">$rbp</span></span><br><span class="line">rsp            0x7fffffffe330   0x7fffffffe330</span><br><span class="line">rbp            0x7fffffffe390   0x7fffffffe390</span><br></pre></td></tr></table></figure>
<h6 id="3-将0x900c存入rbp-4的地址，对应代码第3行。">3. 将0x900c存入rbp - 4的地址，对应代码第3行。</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000555555554722 &lt;+8&gt;:     movl   <span class="variable">$0x900c</span>,-0x4(%rbp)</span><br><span class="line">(gdb) x/26wx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffe330: 0xf7ffea98      0x00007fff      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe340: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe350: 0xffffffff      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe360: 0xf7ffa268      0x00007fff      0xf7ffe710      0x00007fff</span><br><span class="line">0x7fffffffe370: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe380: 0x00000000      0x00000000      0x00000000      0x0000900c</span><br><span class="line">0x7fffffffe390: 0xffffe3b0      0x00007fff</span><br></pre></td></tr></table></figure>
<h6 id="4-将edi赋值成8，作为malloc的第一个入参。malloc的结果rax存入rbp-16的地址。对应代码第4行。">4. 将edi赋值成8，作为malloc的第一个入参。malloc的结果rax存入rbp-16的地址。对应代码第4行。</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000555555554729 &lt;+15&gt;:    mov    <span class="variable">$0x8</span>,%edi</span><br><span class="line">0x000055555555472e &lt;+20&gt;:    callq  0x5555555545f0 &lt;malloc@plt&gt;</span><br><span class="line">0x0000555555554733 &lt;+25&gt;:    mov    %rax,-0x10(%rbp)</span><br><span class="line">(gdb) x/26wx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffe330: 0xf7ffea98      0x00007fff      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe340: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe350: 0xffffffff      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe360: 0xf7ffa268      0x00007fff      0xf7ffe710      0x00007fff</span><br><span class="line">0x7fffffffe370: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe380: 0x55756260      0x00005555      0x00000000      0x0000900c</span><br><span class="line">0x7fffffffe390: 0xffffe3b0      0x00007fff</span><br></pre></td></tr></table></figure>
<h6 id="5-将0x6f57206f6c6c6548存入rax，将0x21646c72存入edx，rax存入rbp-48的地址，rdx存入rbp-40的地址，最后四字节补0，对应代码第5行。">5. 将0x6f57206f6c6c6548存入rax，将0x21646c72存入edx，rax存入rbp-48的地址，rdx存入rbp-40的地址，最后四字节补0，对应代码第5行。</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">48  65  6c  6c  6f  20  57  6f  72  6c  64  21</span><br><span class="line"><span class="string">&#x27;H&#x27;</span> <span class="string">&#x27;e&#x27;</span> <span class="string">&#x27;l&#x27;</span> <span class="string">&#x27;l&#x27;</span> <span class="string">&#x27;o&#x27;</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;W&#x27;</span> <span class="string">&#x27;o&#x27;</span> <span class="string">&#x27;r&#x27;</span> <span class="string">&#x27;l&#x27;</span> <span class="string">&#x27;d&#x27;</span> <span class="string">&#x27;!&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000555555554737 &lt;+29&gt;:    movabs <span class="variable">$0x6f57206f6c6c6548</span>,%rax</span><br><span class="line">0x0000555555554741 &lt;+39&gt;:    mov    <span class="variable">$0x21646c72</span>,%edx</span><br><span class="line">0x0000555555554746 &lt;+44&gt;:    mov    %rax,-0x30(%rbp)</span><br><span class="line">0x000055555555474a &lt;+48&gt;:    mov    %rdx,-0x28(%rbp)</span><br><span class="line">0x000055555555474e &lt;+52&gt;:    movl   <span class="variable">$0x0</span>,-0x20(%rbp)</span><br><span class="line">(gdb) x/26wx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffe330: 0xf7ffea98      0x00007fff      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe340: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe350: 0xffffffff      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe360: 0x6c6c6548      0x6f57206f      0x21646c72      0x00000000</span><br><span class="line">0x7fffffffe370: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe380: 0x55756260      0x00005555      0x00000000      0x0000900c</span><br><span class="line">0x7fffffffe390: 0xffffe3b0      0x00007fff</span><br></pre></td></tr></table></figure>
<h6 id="6-从rbp-96的地址开始，依次将连续的40字节设置成0，对应代码第6行。">6. 从rbp-96的地址开始，依次将连续的40字节设置成0，对应代码第6行。</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000555555554755 &lt;+59&gt;:    movq   <span class="variable">$0x0</span>,-0x60(%rbp)</span><br><span class="line">0x000055555555475d &lt;+67&gt;:    movq   <span class="variable">$0x0</span>,-0x58(%rbp)</span><br><span class="line">0x0000555555554765 &lt;+75&gt;:    movq   <span class="variable">$0x0</span>,-0x50(%rbp)</span><br><span class="line">0x000055555555476d &lt;+83&gt;:    movq   <span class="variable">$0x0</span>,-0x48(%rbp)</span><br><span class="line">0x0000555555554775 &lt;+91&gt;:    movq   <span class="variable">$0x0</span>,-0x40(%rbp)</span><br><span class="line">0x7fffffffe330: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe340: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe350: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe360: 0x6c6c6548      0x6f57206f      0x21646c72      0x00000000</span><br><span class="line">0x7fffffffe370: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe380: 0x55756260      0x00005555      0x00000000      0x0000900c</span><br><span class="line">0x7fffffffe390: 0xffffe3b0      0x00007fff</span><br></pre></td></tr></table></figure>
<h6 id="7-从rbp-96的地址开始，依次将连续的100字节设置成’c’，对应代码第7行。（这里构造了踩栈）">7. 从rbp-96的地址开始，依次将连续的100字节设置成’c’，对应代码第7行。（这里构造了踩栈）</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x000055555555477d &lt;+99&gt;:    lea    -0x60(%rbp),%rax</span><br><span class="line">0x0000555555554781 &lt;+103&gt;:   mov    <span class="variable">$0x64</span>,%edx</span><br><span class="line">0x0000555555554786 &lt;+108&gt;:   mov    <span class="variable">$0x63</span>,%esi</span><br><span class="line">0x000055555555478b &lt;+113&gt;:   mov    %rax,%rdi</span><br><span class="line">0x000055555555478e &lt;+116&gt;:   callq  0x5555555545e0 &lt;memset@plt&gt;</span><br><span class="line">(gdb) x/26wx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffe330: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe340: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe350: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe360: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe370: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe380: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe390: 0x63636363      0x00007fff</span><br></pre></td></tr></table></figure>
<h6 id="8-对应代码第8行，由于构造了踩栈，指针b被踩，free非法指针会异常。">8. 对应代码第8行，由于构造了踩栈，指针b被踩，free非法指针会异常。</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000555555554793 &lt;+121&gt;:   mov    -0x10(%rbp),%rax</span><br><span class="line">0x0000555555554797 &lt;+125&gt;:   mov    %rax,%rdi</span><br><span class="line">0x000055555555479a &lt;+128&gt;:   callq  0x5555555545c0 &lt;free@plt&gt;</span><br><span class="line">(gdb) ni</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">__GI___libc_free (mem=0x6363636363636363) at malloc.c:3113</span><br><span class="line">3113    malloc.c: No such file or directory.</span><br><span class="line">(gdb) i r</span><br><span class="line">rax            0x0      0</span><br><span class="line">rbx            0x0      0</span><br><span class="line">rcx            0x555555756260   93824994337376</span><br><span class="line">rdx            0x64     100</span><br><span class="line">rsi            0x63     99</span><br><span class="line">rdi            0x6363636363636363       7161677110969590627</span><br><span class="line">rbp            0x7fffffffe390   0x7fffffffe390</span><br><span class="line">rsp            0x7fffffffe2c0   0x7fffffffe2c0</span><br><span class="line">r8             0x2      2</span><br><span class="line">r9             0x0      0</span><br><span class="line">r10            0x555555756010   93824994336784</span><br><span class="line">r11            0x0      0</span><br><span class="line">r12            0x6363636363636363       7161677110969590627</span><br><span class="line">r13            0x7fffffffe4d0   140737488348368</span><br><span class="line">r14            0x0      0</span><br><span class="line">r15            0x0      0</span><br><span class="line">rip            0x7ffff7a7994d   0x7ffff7a7994d &lt;__GI___libc_free+61&gt;</span><br><span class="line">eflags         0x10206  [ PF IF RF ]</span><br><span class="line">cs             0x33     51</span><br><span class="line">ss             0x2b     43</span><br><span class="line">ds             0x0      0</span><br><span class="line">es             0x0      0</span><br><span class="line">fs             0x0      0</span><br><span class="line">gs             0x0      0</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  __GI___libc_free (mem=0x6363636363636363) at malloc.c:3113</span></span><br><span class="line"><span class="comment">#1  0x000055555555479f in FuncC () at demo.c:12</span></span><br><span class="line"><span class="comment">#2  0x00005555555547c7 in FuncB () at demo.c:20</span></span><br></pre></td></tr></table></figure>
<h6 id="9-对应代码第9行">9. 对应代码第9行</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x000055555555479f &lt;+133&gt;:   movq   <span class="variable">$0x0</span>,-0x10(%rbp)</span><br><span class="line">0x00005555555547a7 &lt;+141&gt;:   mov    <span class="variable">$0x0</span>,%eax</span><br></pre></td></tr></table></figure>
<h6 id="10-eax-rax作为函数的返回值，对应代码第10行">10. eax/rax作为函数的返回值，对应代码第10行</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x00005555555547a7 &lt;+141&gt;:   mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">0x00005555555547ac &lt;+146&gt;:   leaveq</span><br><span class="line">0x00005555555547ad &lt;+147&gt;:   retq</span><br></pre></td></tr></table></figure>
<p>arm指令</p>
<table>
<thead>
<tr>
<th>指令</th>
<th></th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>mov</td>
<td>mov x1, x0</td>
<td>将寄存器x0的值复制到寄存器x1中</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>assembly</category>
      </categories>
  </entry>
  <entry>
    <title>gdb调试</title>
    <url>/zhoukaiqi/how-to-use-gdb/</url>
    <content><![CDATA[<p>1、解决gdb attch报错: Operation not permitted</p>
<blockquote>
<p>Attaching to process 6122 Could not attach to process.  If your uid matches the uid of the target process, check the setting of /proc/sys/kernel/yama/ptrace_scope, or try again as the root user.  For more details, see /etc/sysctl.d/10-ptrace.conf ptrace: Operation not permitted. /mnt/hgfs/mint/gdb_demo/6122: No such file or directory.</p>
</blockquote>
<p>原因是Ubuntu 16.04 的/etc/sysctl.d/10-ptrace.conf文件中最后一行默认kernel.yama.ptrace_scope = 1 这个值不允许用户使用普通账户使用attach ID连接程序进行调试，需要使用超级用户权限才能连接。可以把kernel.yama.ptrace_scope的值改为 0，即 sudo vim /etc/sysctl.d/10-ptrace.conf 将最后一行改为  kernel.yama.ptrace_scope = 0，保存退出。 重启系统后，普通用户就可以使用attach ID连接程序调试了。</p>
<p>2、gdb调试不出现源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc demo.c -Wl,--strip-debug -o demo</span><br></pre></td></tr></table></figure>
<p>3、入参与出参</p>
<table>
<thead>
<tr>
<th>CPU</th>
<th>入参</th>
<th>出参</th>
</tr>
</thead>
<tbody>
<tr>
<td>x86</td>
<td>ebp+8,，ebp+12，ebp+16，ebp+20</td>
<td>eax</td>
</tr>
<tr>
<td>x86_64</td>
<td>rdi，rsi，rdx， rcx， r8， r9</td>
<td>rax</td>
</tr>
<tr>
<td>arm64</td>
<td>x0， x1， x2</td>
<td>x0</td>
</tr>
</tbody>
</table>
<p>4、条件断点—查看出参</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb attach `pidof demo1`</span><br><span class="line">handle SIG35 SIG36 SIGUSR2 nostop noprint</span><br><span class="line"><span class="built_in">set</span> heigh 0</span><br><span class="line">def ops</span><br><span class="line">bt</span><br><span class="line">i r</span><br><span class="line">x/s <span class="variable">$rdi</span></span><br><span class="line">p <span class="variable">$rsi</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$a</span>=<span class="variable">$rdx</span></span><br><span class="line">fin</span><br><span class="line">x/5wx <span class="variable">$a</span></span><br><span class="line">x/s <span class="variable">$a</span></span><br><span class="line">p *(unsigned int*)(<span class="variable">$a</span>+16)</span><br><span class="line">det</span><br><span class="line">q</span><br><span class="line">end</span><br><span class="line">b addStudent</span><br><span class="line"><span class="built_in">command</span></span><br><span class="line">ops</span><br><span class="line">end</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>gdb</category>
      </categories>
  </entry>
</search>
