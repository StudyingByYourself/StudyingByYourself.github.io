<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言灵活使用地址偏移</title>
    <url>/zhoukaiqi/fa7b019af148/</url>
    <content><![CDATA[<p>本文介绍了C语言地址偏移的灵活使用。</p>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">((type *)<span class="number">0</span>)</span><br><span class="line">(((type *)<span class="number">0</span>)-&gt;member)</span><br><span class="line">&amp;(((type *)<span class="number">0</span>)-&gt;member)</span><br><span class="line"><span class="comment">// 表示某个结构体成员在结构体中的偏移量</span></span><br><span class="line">(<span class="type">char</span> *)(&amp;(((type *)<span class="number">0</span>)-&gt;member))</span><br><span class="line">(type *)((<span class="type">char</span> *)(item) - (<span class="type">char</span> *)(&amp;(((type *)<span class="number">0</span>)-&gt;member)))</span><br></pre></td></tr></table></figure>
<p>测试demo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>,*<span class="title">prev</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DataEntry</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">node</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NODE_ENTRY(item, type, member) \</span></span><br><span class="line"><span class="meta">    ((type *)((char *)(item) - (char *)(&amp;(((type *)0)-&gt;member))))</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DataEntry</span> <span class="title">e</span>;</span></span><br><span class="line">    <span class="comment">/* 使用node的地址，获取key和value的值*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DataEntry</span> *<span class="title">p</span> =</span> NODE_ENTRY(&amp;e.node, DataEntry, node);</span><br><span class="line">    <span class="type">int</span> key = p-&gt;key;</span><br><span class="line">    <span class="type">int</span> value = p-&gt;value;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>arm64常见汇编指令</title>
    <url>/zhoukaiqi/88508989b720/</url>
    <content><![CDATA[<p>本文介绍了arm64常见汇编指令</p>
<table>
<thead>
<tr>
<th>指令</th>
<th></th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>mov</td>
<td>mov x1, x0</td>
<td>将寄存器x0的值复制给寄存器x1</td>
</tr>
<tr>
<td>movk</td>
<td>movk x0, #1234, lsl #16</td>
<td>lsl：向左移位，即x0 = 0x12340000</td>
</tr>
<tr>
<td>stp</td>
<td>x29, x30, [sp, #-112]</td>
<td>sp = sp - 112，将x29, x30依次存入sp的位置; <br>x29充当FP寄存器，用于保存上一个sp; <br>x30充当LR寄存器，用来保存函数返回后的下一条执行地址</td>
</tr>
<tr>
<td>ldp</td>
<td>ldp     x29, x30, [sp], #112</td>
<td>sp取值赋给x29, sp + 8取值赋给x30, sp = sp + 112</td>
</tr>
<tr>
<td>str</td>
<td>str     w0, [x29, #40]</td>
<td>w0寄存器存入x29+40的内存地址</td>
</tr>
<tr>
<td>stur</td>
<td>stur    wzr, [x29, #93]</td>
<td>xzr/wzr分别代表8字节/4字节的0, 0x00000000写入x29+93的内存地址; <br/>sturh(2字节)，sturb(1字节)</td>
</tr>
<tr>
<td>add</td>
<td>add     x0, x29, #0x28</td>
<td>x29与0x28相加后赋值给x0</td>
</tr>
<tr>
<td>ldr</td>
<td>ldr     x2, [x1]</td>
<td>将x1作为地址，取该内存地址的值存入x2寄存器</td>
</tr>
<tr>
<td>eor</td>
<td>eor     x1, x2, x1</td>
<td>异或指令, x1 = x2 ^ x1</td>
</tr>
<tr>
<td>cbz</td>
<td>cbz w0, 0x687f70</td>
<td>与0相等则跳转到0x687f70</td>
</tr>
<tr>
<td>cbnz</td>
<td>cbz x1, 0x687f78</td>
<td>不与0相等则跳转到0x687f78</td>
</tr>
</tbody>
</table>
<p>保存入参的寄存器：<code>x0 - x7</code> 依次对应第1到第8个参数</p>
<p>保存返回值的寄存器： <code>x0</code></p>
<span id="more"></span>
<p>以demo.c为例，分析arm下的汇编指令。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FuncC</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0x900C</span>;</span><br><span class="line">    <span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="string">&#x27;c&#x27;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">40</span>);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    b = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="1-完整指令">1. 完整指令</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncC</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> FuncC:</span><br><span class="line">   0x0000aaaaaaaaa8d4 &lt;+0&gt;:     stp     x29, x30, [sp, <span class="comment">#-112]!</span></span><br><span class="line">   0x0000aaaaaaaaa8d8 &lt;+4&gt;:     mov     x29, sp</span><br><span class="line">   0x0000aaaaaaaaa8dc &lt;+8&gt;:     adrp    x0, 0xaaaaaaaba000</span><br><span class="line">   0x0000aaaaaaaaa8e0 &lt;+12&gt;:    ldr     x0, [x0, <span class="comment">#4064]</span></span><br><span class="line">   0x0000aaaaaaaaa8e4 &lt;+16&gt;:    ldr     x1, [x0]</span><br><span class="line">   0x0000aaaaaaaaa8e8 &lt;+20&gt;:    str     x1, [x29, <span class="comment">#104]</span></span><br><span class="line">   0x0000aaaaaaaaa8ec &lt;+24&gt;:    mov     x1, <span class="comment">#0x0                        // #0</span></span><br><span class="line">   0x0000aaaaaaaaa8f0 &lt;+28&gt;:    mov     w0, <span class="comment">#0x900c                     // #36876</span></span><br><span class="line">   0x0000aaaaaaaaa8f4 &lt;+32&gt;:    str     w0, [x29, <span class="comment">#28]</span></span><br><span class="line">   0x0000aaaaaaaaa8f8 &lt;+36&gt;:    mov     x0, <span class="comment">#0x8                        // #8</span></span><br><span class="line">   0x0000aaaaaaaaa8fc &lt;+40&gt;:    bl      0xaaaaaaaaa750 &lt;malloc@plt&gt;</span><br><span class="line">   0x0000aaaaaaaaa900 &lt;+44&gt;:    str     x0, [x29, <span class="comment">#32]</span></span><br><span class="line">   0x0000aaaaaaaaa904 &lt;+48&gt;:    adrp    x0, 0xaaaaaaaaa000</span><br><span class="line">   0x0000aaaaaaaaa908 &lt;+52&gt;:    add     x1, x0, <span class="comment">#0xa98</span></span><br><span class="line">   0x0000aaaaaaaaa90c &lt;+56&gt;:    add     x0, x29, <span class="comment">#0x50</span></span><br><span class="line">   0x0000aaaaaaaaa910 &lt;+60&gt;:    ldr     x2, [x1]</span><br><span class="line">   0x0000aaaaaaaaa914 &lt;+64&gt;:    str     x2, [x0]</span><br><span class="line">   0x0000aaaaaaaaa918 &lt;+68&gt;:    ldur    x1, [x1, <span class="comment">#5]</span></span><br><span class="line">   0x0000aaaaaaaaa91c &lt;+72&gt;:    stur    x1, [x0, <span class="comment">#5]</span></span><br><span class="line">   0x0000aaaaaaaaa920 &lt;+76&gt;:    stur    wzr, [x29, <span class="comment">#93]</span></span><br><span class="line">   0x0000aaaaaaaaa924 &lt;+80&gt;:    sturh   wzr, [x29, <span class="comment">#97]</span></span><br><span class="line">   0x0000aaaaaaaaa928 &lt;+84&gt;:    strb    wzr, [x29, <span class="comment">#99]</span></span><br><span class="line">   0x0000aaaaaaaaa92c &lt;+88&gt;:    stp     xzr, xzr, [x29, <span class="comment">#40]</span></span><br><span class="line">   0x0000aaaaaaaaa930 &lt;+92&gt;:    stp     xzr, xzr, [x29, <span class="comment">#56]</span></span><br><span class="line">   0x0000aaaaaaaaa934 &lt;+96&gt;:    str     xzr, [x29, <span class="comment">#72]</span></span><br><span class="line">   0x0000aaaaaaaaa938 &lt;+100&gt;:   mov     w0, <span class="comment">#0x1                        // #1</span></span><br><span class="line">   0x0000aaaaaaaaa93c &lt;+104&gt;:   str     w0, [x29, <span class="comment">#40]</span></span><br><span class="line">   0x0000aaaaaaaaa940 &lt;+108&gt;:   add     x0, x29, <span class="comment">#0x28</span></span><br><span class="line">   0x0000aaaaaaaaa944 &lt;+112&gt;:   mov     x2, <span class="comment">#0x28                       // #40</span></span><br><span class="line">   0x0000aaaaaaaaa948 &lt;+116&gt;:   mov     w1, <span class="comment">#0x63                       // #99</span></span><br><span class="line">   0x0000aaaaaaaaa94c &lt;+120&gt;:   bl      0xaaaaaaaaa770 &lt;memset@plt&gt;</span><br><span class="line">   0x0000aaaaaaaaa950 &lt;+124&gt;:   ldr     x0, [x29, <span class="comment">#32]</span></span><br><span class="line">   0x0000aaaaaaaaa954 &lt;+128&gt;:   bl      0xaaaaaaaaa7b0 &lt;free@plt&gt;</span><br><span class="line">   0x0000aaaaaaaaa958 &lt;+132&gt;:   str     xzr, [x29, <span class="comment">#32]</span></span><br><span class="line">   0x0000aaaaaaaaa95c &lt;+136&gt;:   mov     w0, <span class="comment">#0x0                        // #0</span></span><br><span class="line">   0x0000aaaaaaaaa960 &lt;+140&gt;:   adrp    x1, 0xaaaaaaaba000</span><br><span class="line">   0x0000aaaaaaaaa964 &lt;+144&gt;:   ldr     x1, [x1, <span class="comment">#4064]</span></span><br><span class="line">   0x0000aaaaaaaaa968 &lt;+148&gt;:   ldr     x2, [x29, <span class="comment">#104]</span></span><br><span class="line">   0x0000aaaaaaaaa96c &lt;+152&gt;:   ldr     x1, [x1]</span><br><span class="line">   0x0000aaaaaaaaa970 &lt;+156&gt;:   eor     x1, x2, x1</span><br><span class="line">   0x0000aaaaaaaaa974 &lt;+160&gt;:   cmp     x1, <span class="comment">#0x0</span></span><br><span class="line">   0x0000aaaaaaaaa978 &lt;+164&gt;:   b.eq    0xaaaaaaaaa980 &lt;FuncC+172&gt;  // b.none</span><br><span class="line">   0x0000aaaaaaaaa97c &lt;+168&gt;:   bl      0xaaaaaaaaa780 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">   0x0000aaaaaaaaa980 &lt;+172&gt;:   ldp     x29, x30, [sp], <span class="comment">#112</span></span><br><span class="line">   0x0000aaaaaaaaa984 &lt;+176&gt;:   ret</span><br></pre></td></tr></table></figure>
<h6 id="2-开栈">2. 开栈</h6>
<p>sp从0xfffffffff9f0偏移-112字节到0xfffffffff980，先存入x29，再存入x30，同时将sp赋值给x29。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) i r x29 x30 sp</span><br><span class="line">x29            0xfffffffff9f0   281474976709104</span><br><span class="line">x30            0xaaaaaaaaa998   187649984473496</span><br><span class="line">sp             0xfffffffff9f0   0xfffffffff9f0</span><br><span class="line">0x0000aaaaaaaaa8d4 &lt;+0&gt;:     stp     x29, x30, [sp, <span class="comment">#-112]!</span></span><br><span class="line">0x0000aaaaaaaaa8d8 &lt;+4&gt;:     mov     x29, sp</span><br><span class="line">(gdb) i r x29 x30 sp</span><br><span class="line">x29            0xfffffffff980   281474976708992</span><br><span class="line">x30            0xaaaaaaaaa998   187649984473496</span><br><span class="line">sp             0xfffffffff980   0xfffffffff980</span><br><span class="line">(gdb) x/8wx <span class="variable">$sp</span></span><br><span class="line">0xfffffffff980: 0xfffff9f0      0x0000ffff      0xaaaaa998      0x0000aaaa</span><br><span class="line">0xfffffffff990: 0x00000000      0x00000000      0x00000000      0x00000000</span><br></pre></td></tr></table></figure>
<h6 id="3-入栈时存栈保护canary">3. 入栈时存栈保护canary</h6>
<p>adrp指令这里不展开。以下指令主要是将栈保护的<code>canary</code>存入栈中，后续出栈前校验。（编译选项：<code>-fstack-protector</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000aaaaaaaaa8dc &lt;+8&gt;:     adrp    x0, 0xaaaaaaaba000</span><br><span class="line">0x0000aaaaaaaaa8e0 &lt;+12&gt;:    ldr     x0, [x0, <span class="comment">#4064]</span></span><br><span class="line">0x0000aaaaaaaaa8e4 &lt;+16&gt;:    ldr     x1, [x0]</span><br><span class="line">0x0000aaaaaaaaa8e8 &lt;+20&gt;:    str     x1, [x29, <span class="comment">#104]</span></span><br><span class="line">0x0000aaaaaaaaa8ec &lt;+24&gt;:    mov     x1, <span class="comment">#0x0                        // #0</span></span><br><span class="line">(gdb) x/gx <span class="variable">$x0</span></span><br><span class="line">0xfffff7ffd7a8 &lt;__stack_chk_guard&gt;:     0x9af4bd74875a3200</span><br><span class="line">(gdb) x/2wx <span class="variable">$sp</span> + 104</span><br><span class="line">0xfffffffff9e8: 0x875a3200      0x9af4bd74</span><br></pre></td></tr></table></figure>
<h6 id="4-将0x900c存入x29-28的内存地址，对应代码第3行">4. 将0x900c存入x29+28的内存地址，对应代码第3行</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000aaaaaaaaa8f0 &lt;+28&gt;:    mov     w0, <span class="comment">#0x900c                     // #36876</span></span><br><span class="line">0x0000aaaaaaaaa8f4 &lt;+32&gt;:    str     w0, [x29, <span class="comment">#28]</span></span><br><span class="line">(gdb) x/8wx <span class="variable">$sp</span></span><br><span class="line">0xfffffffff980: 0xfffff9f0      0x0000ffff      0xaaaaa998      0x0000aaaa</span><br><span class="line">0xfffffffff990: 0x00000000      0x00000000      0x00000000      0x0000900c</span><br></pre></td></tr></table></figure>
<h6 id="5-申请8字节内存，内存的起始地址存入x29-32的内存地址，对应代码第4行">5. 申请8字节内存，内存的起始地址存入x29+32的内存地址，对应代码第4行</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000aaaaaaaaa8f8 &lt;+36&gt;:    mov     x0, <span class="comment">#0x8                        // #8</span></span><br><span class="line">0x0000aaaaaaaaa8fc &lt;+40&gt;:    bl      0xaaaaaaaaa750 &lt;malloc@plt&gt;</span><br><span class="line">0x0000aaaaaaaaa900 &lt;+44&gt;:    str     x0, [x29, <span class="comment">#32]</span></span><br><span class="line">(gdb) i r x0</span><br><span class="line">x0             0xaaaaaaabc260   187649984545376</span><br><span class="line">(gdb) x/12wx <span class="variable">$sp</span></span><br><span class="line">0xfffffffff980: 0xfffff9f0      0x0000ffff      0xaaaaa998      0x0000aaaa</span><br><span class="line">0xfffffffff990: 0x00000000      0x00000000      0x00000000      0x0000900c</span><br><span class="line">0xfffffffff9a0: 0xaaabc260      0x0000aaaa      0x00000000      0x00000000</span><br></pre></td></tr></table></figure>
<h6 id="6-对应代码第5行">6. 对应代码第5行</h6>
<p>字符串长度是20字节</p>
<p>前12字节：为了字节对齐，第一次拷贝8字节，偏移到第5字节再拷贝8字节   from <code>ldr     x2, [x1]</code> to <code>ldur    x1, [x1, #5]</code></p>
<p>第13字节：字符串的结尾需要赋值&quot;\0&quot;  <code>stur    wzr, [x29, #93]</code></p>
<p>后面7字节：用&quot;\0&quot;补齐</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000aaaaaaaaa904 &lt;+48&gt;:    adrp    x0, 0xaaaaaaaaa000</span><br><span class="line">0x0000aaaaaaaaa908 &lt;+52&gt;:    add     x1, x0, <span class="comment">#0xa98</span></span><br><span class="line">0x0000aaaaaaaaa90c &lt;+56&gt;:    add     x0, x29, <span class="comment">#0x50</span></span><br><span class="line">(gdb) i r <span class="variable">$x0</span></span><br><span class="line">x0             0xfffffffff9d0   281474976709072</span><br><span class="line">(gdb) x/4wx <span class="variable">$x1</span></span><br><span class="line">0xaaaaaaaaaa98: 0x6c6c6548      0x6f57206f      0x21646c72      0x00000000</span><br><span class="line">(gdb) x/s <span class="variable">$x1</span></span><br><span class="line">0xaaaaaaaaaa98: <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">0x0000aaaaaaaaa910 &lt;+60&gt;:    ldr     x2, [x1]</span><br><span class="line">0x0000aaaaaaaaa914 &lt;+64&gt;:    str     x2, [x0]</span><br><span class="line">(gdb) x/4wx <span class="variable">$sp</span> + 80</span><br><span class="line">0xfffffffff9d0: 0x6c6c6548      0x6f57206f      0x00000000      0x00000000</span><br><span class="line">0x0000aaaaaaaaa918 &lt;+68&gt;:    ldur    x1, [x1, <span class="comment">#5]</span></span><br><span class="line">0x0000aaaaaaaaa91c &lt;+72&gt;:    stur    x1, [x0, <span class="comment">#5]</span></span><br><span class="line">(gdb) x/5wx <span class="variable">$sp</span> + 80</span><br><span class="line">0xfffffffff9d0: 0x6c6c6548      0x6f57206f      0x21646c72      0x00000000</span><br><span class="line">0xfffffffff9e0: 0xf7fffac8</span><br><span class="line">0x0000aaaaaaaaa920 &lt;+76&gt;:    stur    wzr, [x29, <span class="comment">#93]</span></span><br><span class="line">0x0000aaaaaaaaa924 &lt;+80&gt;:    sturh   wzr, [x29, <span class="comment">#97]</span></span><br><span class="line">0x0000aaaaaaaaa928 &lt;+84&gt;:    strb    wzr, [x29, <span class="comment">#99]</span></span><br><span class="line">(gdb) x/5wx <span class="variable">$sp</span> + 80</span><br><span class="line">0xfffffffff9d0: 0x6c6c6548      0x6f57206f      0x21646c72      0x00000000</span><br><span class="line">0xfffffffff9e0: 0x00000000</span><br></pre></td></tr></table></figure>
<h6 id="7-对应代码第6行">7. 对应代码第6行</h6>
<p><code>stp     xzr, xzr, [x29, #40]</code> 连续拷贝16字节0到[x29, #40]，可以考虑用SSE指令加速。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000aaaaaaaaa92c &lt;+88&gt;:    stp     xzr, xzr, [x29, <span class="comment">#40]</span></span><br><span class="line">0x0000aaaaaaaaa930 &lt;+92&gt;:    stp     xzr, xzr, [x29, <span class="comment">#56]</span></span><br><span class="line">0x0000aaaaaaaaa934 &lt;+96&gt;:    str     xzr, [x29, <span class="comment">#72]</span></span><br><span class="line">0x0000aaaaaaaaa938 &lt;+100&gt;:   mov     w0, <span class="comment">#0x1                        // #1</span></span><br><span class="line">0x0000aaaaaaaaa93c &lt;+104&gt;:   str     w0, [x29, <span class="comment">#40]</span></span><br></pre></td></tr></table></figure>
<h6 id="8-对应代码第7行">8. 对应代码第7行</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000aaaaaaaaa940 &lt;+108&gt;:   add     x0, x29, <span class="comment">#0x28                        </span></span><br><span class="line">0x0000aaaaaaaaa944 &lt;+112&gt;:   mov     x2, <span class="comment">#0x28                       // #40</span></span><br><span class="line">0x0000aaaaaaaaa948 &lt;+116&gt;:   mov     w1, <span class="comment">#0x63                       // #99</span></span><br><span class="line">0x0000aaaaaaaaa94c &lt;+120&gt;:   bl      0xaaaaaaaaa770 &lt;memset@plt&gt;           </span><br></pre></td></tr></table></figure>
<h6 id="9-对应代码第8和第9行">9. 对应代码第8和第9行</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000aaaaaaaaa950 &lt;+124&gt;:   ldr     x0, [x29, <span class="comment">#32]           </span></span><br><span class="line">0x0000aaaaaaaaa954 &lt;+128&gt;:   bl      0xaaaaaaaaa7b0 &lt;free@plt&gt;</span><br><span class="line">0x0000aaaaaaaaa958 &lt;+132&gt;:   str     xzr, [x29, <span class="comment">#32]</span></span><br></pre></td></tr></table></figure>
<h6 id="10-出栈前校验栈保护canary">10. 出栈前校验栈保护canary</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000aaaaaaaaa960 &lt;+140&gt;:   adrp    x1, 0xaaaaaaaba000      </span><br><span class="line">0x0000aaaaaaaaa964 &lt;+144&gt;:   ldr     x1, [x1, <span class="comment">#4064]</span></span><br><span class="line">0x0000aaaaaaaaa968 &lt;+148&gt;:   ldr     x2, [x29, <span class="comment">#104]</span></span><br><span class="line">0x0000aaaaaaaaa96c &lt;+152&gt;:   ldr     x1, [x1]</span><br><span class="line">0x0000aaaaaaaaa970 &lt;+156&gt;:   eor     x1, x2, x1</span><br><span class="line">0x0000aaaaaaaaa974 &lt;+160&gt;:   cmp     x1, <span class="comment">#0x0</span></span><br><span class="line">0x0000aaaaaaaaa978 &lt;+164&gt;:   b.eq    0xaaaaaaaaa980 &lt;FuncC+172&gt;  // b.none</span><br><span class="line">0x0000aaaaaaaaa97c &lt;+168&gt;:   bl      0xaaaaaaaaa780 &lt;__stack_chk_fail@plt&gt;</span><br></pre></td></tr></table></figure>
<h6 id="11-出栈">11. 出栈</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) i r <span class="variable">$x29</span> <span class="variable">$x30</span> <span class="variable">$sp</span></span><br><span class="line">x29            0xfffffffff980   281474976708992</span><br><span class="line">x30            0xaaaaaaaaa958   187649984473432</span><br><span class="line">sp             0xfffffffff980   0xfffffffff980</span><br><span class="line">(gdb) x/4wx <span class="variable">$sp</span></span><br><span class="line">0xfffffffff980: 0xfffff9f0      0x0000ffff      0xaaaaa998      0x0000aaaa</span><br><span class="line">0x0000aaaaaaaaa980 &lt;+172&gt;:   ldp     x29, x30, [sp], <span class="comment">#112</span></span><br><span class="line">(gdb) i r <span class="variable">$x29</span> <span class="variable">$x30</span> <span class="variable">$sp</span></span><br><span class="line">x29            0xfffffffff9f0   281474976709104</span><br><span class="line">x30            0xaaaaaaaaa998   187649984473496</span><br><span class="line">sp             0xfffffffff9f0   0xfffffffff9f0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>assembly</category>
      </categories>
      <tags>
        <tag>assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>SIGSEGV信号处理</title>
    <url>/zhoukaiqi/fdd668922827/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ec520e3c2ef324906049c7ac107e7aa888c3e592a41e2bdde7827030ea0f3e06"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/zhoukaiqi/lib/hbe.js"></script><link href="/zhoukaiqi/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>x86_64模拟arm环境</title>
    <url>/zhoukaiqi/eb93f416377a/</url>
    <content><![CDATA[<h6 id="1-安装arm交叉编译工具链">1.安装arm交叉编译工具链</h6>
<p>安装交叉编译工具链 <code>gcc-aarch64-linux-gnu</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure>
<p>建立软链接，否则后面执行的时候会报动态库找不到的错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/aarch64-linux-gnu/lib/libc.so.6 /lib/libc.so.6</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.1 /lib/ld-linux-aarch64.so.1</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h6 id="2-安装arm模拟器qemu">2.安装arm模拟器qemu</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qemu</span><br></pre></td></tr></table></figure>
<p>编译<code>a.out</code>并执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zkq@zkq-vm:~$ aarch64-linux-gnu-gcc main.c</span><br><span class="line">zkq@zkq-vm:~$ file a.out</span><br><span class="line">a.out: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, <span class="keyword">for</span> GNU/Linux 3.7.0, BuildID[sha1]=6ef0ca0c6462e038e589b6e1d52220a680007588, not stripped</span><br><span class="line">zkq@zkq-vm:~$ qemu-aarch64 a.out</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
<h6 id="3-通过gdb调试arm程序">3.通过gdb调试arm程序</h6>
<p>gdb调试arm程序的原理：qemu端作为gdb server启动可执行程序，另一端作为gdb client连接gdb server，进行本地远程调试。</p>
<p>首先安装多平台的gdb工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gdb-multiarch</span><br></pre></td></tr></table></figure>
<p>重新编译示例代码<code>main.c</code>，注意，这次加上了参数<code>--static</code>。加上这个参数后，生成的可执行文件为静态链接的。<strong>如果不加这个参数，gdb调试的时候单步执行功能不正常，符号表也找不到。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aarch64-linux-gnu-gcc --static -g main.c</span><br></pre></td></tr></table></figure>
<p>通过下面的命令启动可执行程序<code>a.out</code>, 选项<code>-g</code>指明了gdb的监听端口，这里选择的是1234。该指令运行后，当前窗口会被阻塞住。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-aarch64 -g 1234 a.out</span><br></pre></td></tr></table></figure>
<p>新开一个命令行窗口，启动gdb client，进入gdb交互界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-multiarch a.out</span><br></pre></td></tr></table></figure>
<p>在gdb交互界面输入以下内容就可以连接到server端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">target remote localhost:1234</span><br></pre></td></tr></table></figure>
<p>接下来，就可以正常使用gdb的相关功能调试程序了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) b main</span><br><span class="line">Breakpoint 1 at 0x102e8: file main.c, line 5.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at main.c:5</span><br><span class="line">5	    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>main.c中必须有main函数，否则执行<code>qemu-aarch64 -g 1234 a.out</code>会报<code>Invalid ELF image for this architecture</code></p>
]]></content>
      <categories>
        <category>assembly</category>
      </categories>
  </entry>
  <entry>
    <title>x86_84常见汇编指令</title>
    <url>/zhoukaiqi/1d4d4cadb785/</url>
    <content><![CDATA[<p>本文介绍了x86_84常见汇编指令</p>
<table>
<thead>
<tr>
<th><strong>指令</strong></th>
<th></th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>lea</td>
<td>leaq a(b, c, d), %rax</td>
<td>先计算地址a + b + c * d，然后把最终地址赋值给寄存器rax</td>
</tr>
<tr>
<td>shr</td>
<td>$0x4, %rdi</td>
<td>右移：rdi &gt;&gt; 4</td>
</tr>
<tr>
<td>mov</td>
<td>mov    %rax,-0x10(%rbp)</td>
<td>将rax载入rbp-16的地址，变型：movb, movq, movl, movq</td>
</tr>
<tr>
<td>movz</td>
<td>movzwl %dx %eax</td>
<td>将源操作数做零扩展后，再复制到目的操作数中</td>
</tr>
<tr>
<td>movs</td>
<td>movswl %dx %eax</td>
<td>将源操作数做符号扩展后，再复制到目的操作数中</td>
</tr>
<tr>
<td>movaps</td>
<td>movaps %xmm0, -0x80(%rbp)</td>
<td>SSE指令，一次移动16字节，<code>要求寄存器地址16字节对齐</code></td>
</tr>
<tr>
<td>xor</td>
<td>xor    %eax, %eax</td>
<td>eax清零</td>
</tr>
<tr>
<td>test</td>
<td>test    %eax, %eax</td>
<td>eax与0比较是否相等</td>
</tr>
<tr>
<td>nopl</td>
<td>nopl  0x0(%rax)</td>
<td>冗余指令，为了字节对齐</td>
</tr>
<tr>
<td>ctlq</td>
<td></td>
<td>将eax符号扩展为8字节的rax</td>
</tr>
</tbody>
</table>
<p>保存入参的寄存器：<code>rdi, rsi, rdx, rcx, r8, r9</code> 依次对应第一、二、三、四、五、六个参数</p>
<p>保存返回值的寄存器： <code>rax</code></p>
<span id="more"></span>
<p>编译选项需添加<code>-fno-omit-frame-pointer</code>，否则rbp不作为栈帧寄存器使用，无法推栈。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -Q --<span class="built_in">help</span>=optimizers -O2 | grep frame</span><br><span class="line">-fomit-frame-pointer                  [enabled]</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000"> <strong>push rbp的具体实现</strong> </font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsp = rsp - 8</span><br><span class="line">*(unsigned long*)rsp = rbp</span><br></pre></td></tr></table></figure>
<p><font color="#FF0000"> <strong>callq addr的具体实现</strong> </font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsp = rsp - 8</span><br><span class="line">*(unsigned long*)rsp = rip + sizeof(inst)</span><br><span class="line">rip = addr</span><br></pre></td></tr></table></figure>
<p>以demo.c为例，分析x86_64下的汇编指令。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FuncC</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0x900C</span>;</span><br><span class="line">    <span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="string">&#x27;c&#x27;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">100</span>); <span class="comment">//这里构造了踩栈，后续展开</span></span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    b = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取消栈保护编译选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -fno-stack-protector -g demo.c -o demo</span><br></pre></td></tr></table></figure>
<h6 id="1-完整指令-2">1. 完整指令</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncC</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> FuncC:</span><br><span class="line">   0x000055555555471a &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x000055555555471b &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x000055555555471e &lt;+4&gt;:     sub    <span class="variable">$0x60</span>,%rsp</span><br><span class="line">   0x0000555555554722 &lt;+8&gt;:     movl   <span class="variable">$0x900c</span>,-0x4(%rbp)</span><br><span class="line">   0x0000555555554729 &lt;+15&gt;:    mov    <span class="variable">$0x8</span>,%edi</span><br><span class="line">   0x000055555555472e &lt;+20&gt;:    callq  0x5555555545f0 &lt;malloc@plt&gt;</span><br><span class="line">   0x0000555555554733 &lt;+25&gt;:    mov    %rax,-0x10(%rbp)</span><br><span class="line">   0x0000555555554737 &lt;+29&gt;:    movabs <span class="variable">$0x6f57206f6c6c6548</span>,%rax</span><br><span class="line">   0x0000555555554741 &lt;+39&gt;:    mov    <span class="variable">$0x21646c72</span>,%edx</span><br><span class="line">   0x0000555555554746 &lt;+44&gt;:    mov    %rax,-0x30(%rbp)</span><br><span class="line">   0x000055555555474a &lt;+48&gt;:    mov    %rdx,-0x28(%rbp)</span><br><span class="line">   0x000055555555474e &lt;+52&gt;:    movl   <span class="variable">$0x0</span>,-0x20(%rbp)</span><br><span class="line">   0x0000555555554755 &lt;+59&gt;:    movq   <span class="variable">$0x0</span>,-0x60(%rbp)</span><br><span class="line">   0x000055555555475d &lt;+67&gt;:    movq   <span class="variable">$0x0</span>,-0x58(%rbp)</span><br><span class="line">   0x0000555555554765 &lt;+75&gt;:    movq   <span class="variable">$0x0</span>,-0x50(%rbp)</span><br><span class="line">   0x000055555555476d &lt;+83&gt;:    movq   <span class="variable">$0x0</span>,-0x48(%rbp)</span><br><span class="line">   0x0000555555554775 &lt;+91&gt;:    movq   <span class="variable">$0x0</span>,-0x40(%rbp)</span><br><span class="line">   0x000055555555477d &lt;+99&gt;:    lea    -0x60(%rbp),%rax</span><br><span class="line">   0x0000555555554781 &lt;+103&gt;:   mov    <span class="variable">$0x64</span>,%edx</span><br><span class="line">   0x0000555555554786 &lt;+108&gt;:   mov    <span class="variable">$0x63</span>,%esi</span><br><span class="line">   0x000055555555478b &lt;+113&gt;:   mov    %rax,%rdi</span><br><span class="line">   0x000055555555478e &lt;+116&gt;:   callq  0x5555555545e0 &lt;memset@plt&gt;</span><br><span class="line">   0x0000555555554793 &lt;+121&gt;:   mov    -0x10(%rbp),%rax</span><br><span class="line">   0x0000555555554797 &lt;+125&gt;:   mov    %rax,%rdi</span><br><span class="line">   0x000055555555479a &lt;+128&gt;:   callq  0x5555555545c0 &lt;free@plt&gt;</span><br><span class="line">   0x000055555555479f &lt;+133&gt;:   movq   <span class="variable">$0x0</span>,-0x10(%rbp)</span><br><span class="line">   0x00005555555547a7 &lt;+141&gt;:   mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x00005555555547ac &lt;+146&gt;:   leaveq</span><br><span class="line">   0x00005555555547ad &lt;+147&gt;:   retq</span><br></pre></td></tr></table></figure>
<h6 id="2-push开栈">2. push开栈</h6>
<p>开栈大小 = 96字节，rsp是栈顶，rbp是栈底。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x000055555555471a &lt;+0&gt;:     push   %rbp</span><br><span class="line">0x000055555555471b &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">0x000055555555471e &lt;+4&gt;:     sub    <span class="variable">$0x60</span>,%rsp</span><br><span class="line">(gdb) i r <span class="variable">$rsp</span> <span class="variable">$rbp</span></span><br><span class="line">rsp            0x7fffffffe330   0x7fffffffe330</span><br><span class="line">rbp            0x7fffffffe390   0x7fffffffe390</span><br></pre></td></tr></table></figure>
<h6 id="3-将0x900c存入rbp-4的地址，对应代码第3行。">3. 将0x900c存入rbp - 4的地址，对应代码第3行。</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000555555554722 &lt;+8&gt;:     movl   <span class="variable">$0x900c</span>,-0x4(%rbp)</span><br><span class="line">(gdb) x/26wx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffe330: 0xf7ffea98      0x00007fff      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe340: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe350: 0xffffffff      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe360: 0xf7ffa268      0x00007fff      0xf7ffe710      0x00007fff</span><br><span class="line">0x7fffffffe370: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe380: 0x00000000      0x00000000      0x00000000      0x0000900c</span><br><span class="line">0x7fffffffe390: 0xffffe3b0      0x00007fff</span><br></pre></td></tr></table></figure>
<h6 id="4-将edi赋值成8，作为malloc的第一个入参。malloc的结果rax存入rbp-16的地址。对应代码第4行。">4. 将edi赋值成8，作为malloc的第一个入参。malloc的结果rax存入rbp-16的地址。对应代码第4行。</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000555555554729 &lt;+15&gt;:    mov    <span class="variable">$0x8</span>,%edi</span><br><span class="line">0x000055555555472e &lt;+20&gt;:    callq  0x5555555545f0 &lt;malloc@plt&gt;</span><br><span class="line">0x0000555555554733 &lt;+25&gt;:    mov    %rax,-0x10(%rbp)</span><br><span class="line">(gdb) x/26wx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffe330: 0xf7ffea98      0x00007fff      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe340: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe350: 0xffffffff      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe360: 0xf7ffa268      0x00007fff      0xf7ffe710      0x00007fff</span><br><span class="line">0x7fffffffe370: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe380: 0x55756260      0x00005555      0x00000000      0x0000900c</span><br><span class="line">0x7fffffffe390: 0xffffe3b0      0x00007fff</span><br></pre></td></tr></table></figure>
<h6 id="5-将0x6f57206f6c6c6548存入rax，将0x21646c72存入edx，rax存入rbp-48的地址，rdx存入rbp-40的地址，最后四字节补0，对应代码第5行。">5. 将0x6f57206f6c6c6548存入rax，将0x21646c72存入edx，rax存入rbp-48的地址，rdx存入rbp-40的地址，最后四字节补0，对应代码第5行。</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">48  65  6c  6c  6f  20  57  6f  72  6c  64  21</span><br><span class="line"><span class="string">&#x27;H&#x27;</span> <span class="string">&#x27;e&#x27;</span> <span class="string">&#x27;l&#x27;</span> <span class="string">&#x27;l&#x27;</span> <span class="string">&#x27;o&#x27;</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;W&#x27;</span> <span class="string">&#x27;o&#x27;</span> <span class="string">&#x27;r&#x27;</span> <span class="string">&#x27;l&#x27;</span> <span class="string">&#x27;d&#x27;</span> <span class="string">&#x27;!&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000555555554737 &lt;+29&gt;:    movabs <span class="variable">$0x6f57206f6c6c6548</span>,%rax</span><br><span class="line">0x0000555555554741 &lt;+39&gt;:    mov    <span class="variable">$0x21646c72</span>,%edx</span><br><span class="line">0x0000555555554746 &lt;+44&gt;:    mov    %rax,-0x30(%rbp)</span><br><span class="line">0x000055555555474a &lt;+48&gt;:    mov    %rdx,-0x28(%rbp)</span><br><span class="line">0x000055555555474e &lt;+52&gt;:    movl   <span class="variable">$0x0</span>,-0x20(%rbp)</span><br><span class="line">(gdb) x/26wx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffe330: 0xf7ffea98      0x00007fff      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe340: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe350: 0xffffffff      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe360: 0x6c6c6548      0x6f57206f      0x21646c72      0x00000000</span><br><span class="line">0x7fffffffe370: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe380: 0x55756260      0x00005555      0x00000000      0x0000900c</span><br><span class="line">0x7fffffffe390: 0xffffe3b0      0x00007fff</span><br></pre></td></tr></table></figure>
<h6 id="6-从rbp-96的地址开始，依次将连续的40字节设置成0，对应代码第6行。">6. 从rbp-96的地址开始，依次将连续的40字节设置成0，对应代码第6行。</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000555555554755 &lt;+59&gt;:    movq   <span class="variable">$0x0</span>,-0x60(%rbp)</span><br><span class="line">0x000055555555475d &lt;+67&gt;:    movq   <span class="variable">$0x0</span>,-0x58(%rbp)</span><br><span class="line">0x0000555555554765 &lt;+75&gt;:    movq   <span class="variable">$0x0</span>,-0x50(%rbp)</span><br><span class="line">0x000055555555476d &lt;+83&gt;:    movq   <span class="variable">$0x0</span>,-0x48(%rbp)</span><br><span class="line">0x0000555555554775 &lt;+91&gt;:    movq   <span class="variable">$0x0</span>,-0x40(%rbp)</span><br><span class="line">0x7fffffffe330: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe340: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe350: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe360: 0x6c6c6548      0x6f57206f      0x21646c72      0x00000000</span><br><span class="line">0x7fffffffe370: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7fffffffe380: 0x55756260      0x00005555      0x00000000      0x0000900c</span><br><span class="line">0x7fffffffe390: 0xffffe3b0      0x00007fff</span><br></pre></td></tr></table></figure>
<h6 id="7-从rbp-96的地址开始，依次将连续的100字节设置成’c’，对应代码第7行。（这里构造了踩栈）">7. 从rbp-96的地址开始，依次将连续的100字节设置成’c’，对应代码第7行。（这里构造了踩栈）</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x000055555555477d &lt;+99&gt;:    lea    -0x60(%rbp),%rax</span><br><span class="line">0x0000555555554781 &lt;+103&gt;:   mov    <span class="variable">$0x64</span>,%edx</span><br><span class="line">0x0000555555554786 &lt;+108&gt;:   mov    <span class="variable">$0x63</span>,%esi</span><br><span class="line">0x000055555555478b &lt;+113&gt;:   mov    %rax,%rdi</span><br><span class="line">0x000055555555478e &lt;+116&gt;:   callq  0x5555555545e0 &lt;memset@plt&gt;</span><br><span class="line">(gdb) x/26wx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffe330: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe340: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe350: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe360: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe370: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe380: 0x63636363      0x63636363      0x63636363      0x63636363</span><br><span class="line">0x7fffffffe390: 0x63636363      0x00007fff</span><br></pre></td></tr></table></figure>
<h6 id="8-对应代码第8行，由于构造了踩栈，指针b被踩，free非法指针会异常。">8. 对应代码第8行，由于构造了踩栈，指针b被踩，free非法指针会异常。</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x0000555555554793 &lt;+121&gt;:   mov    -0x10(%rbp),%rax</span><br><span class="line">0x0000555555554797 &lt;+125&gt;:   mov    %rax,%rdi</span><br><span class="line">0x000055555555479a &lt;+128&gt;:   callq  0x5555555545c0 &lt;free@plt&gt;</span><br><span class="line">(gdb) ni</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">__GI___libc_free (mem=0x6363636363636363) at malloc.c:3113</span><br><span class="line">3113    malloc.c: No such file or directory.</span><br><span class="line">(gdb) i r</span><br><span class="line">rax            0x0      0</span><br><span class="line">rbx            0x0      0</span><br><span class="line">rcx            0x555555756260   93824994337376</span><br><span class="line">rdx            0x64     100</span><br><span class="line">rsi            0x63     99</span><br><span class="line">rdi            0x6363636363636363       7161677110969590627</span><br><span class="line">rbp            0x7fffffffe390   0x7fffffffe390</span><br><span class="line">rsp            0x7fffffffe2c0   0x7fffffffe2c0</span><br><span class="line">r8             0x2      2</span><br><span class="line">r9             0x0      0</span><br><span class="line">r10            0x555555756010   93824994336784</span><br><span class="line">r11            0x0      0</span><br><span class="line">r12            0x6363636363636363       7161677110969590627</span><br><span class="line">r13            0x7fffffffe4d0   140737488348368</span><br><span class="line">r14            0x0      0</span><br><span class="line">r15            0x0      0</span><br><span class="line">rip            0x7ffff7a7994d   0x7ffff7a7994d &lt;__GI___libc_free+61&gt;</span><br><span class="line">eflags         0x10206  [ PF IF RF ]</span><br><span class="line">cs             0x33     51</span><br><span class="line">ss             0x2b     43</span><br><span class="line">ds             0x0      0</span><br><span class="line">es             0x0      0</span><br><span class="line">fs             0x0      0</span><br><span class="line">gs             0x0      0</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  __GI___libc_free (mem=0x6363636363636363) at malloc.c:3113</span></span><br><span class="line"><span class="comment">#1  0x000055555555479f in FuncC () at demo.c:12</span></span><br><span class="line"><span class="comment">#2  0x00005555555547c7 in FuncB () at demo.c:20</span></span><br></pre></td></tr></table></figure>
<h6 id="9-对应代码第9行">9. 对应代码第9行</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x000055555555479f &lt;+133&gt;:   movq   <span class="variable">$0x0</span>,-0x10(%rbp)</span><br><span class="line">0x00005555555547a7 &lt;+141&gt;:   mov    <span class="variable">$0x0</span>,%eax</span><br></pre></td></tr></table></figure>
<h6 id="10-eax-rax作为函数的返回值，对应代码第10行">10. eax/rax作为函数的返回值，对应代码第10行</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x00005555555547a7 &lt;+141&gt;:   mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">0x00005555555547ac &lt;+146&gt;:   leaveq</span><br><span class="line">0x00005555555547ad &lt;+147&gt;:   retq</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>assembly</category>
      </categories>
      <tags>
        <tag>assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>common-tools</title>
    <url>/zhoukaiqi/c7f5a0752882/</url>
    <content><![CDATA[<p>本文介绍了常见工具的使用</p>
<span id="more"></span>
<h6 id="1-tcpdump">1. tcpdump</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 指定网口</span><br><span class="line">tcpdump -x -n -v -s 0 -i eth2 -w demo.cap</span><br><span class="line">// 指定IP + 端口</span><br><span class="line">tcpdump -x -n -v -s 0 -i any host IP and port portnum -w demo.cap</span><br><span class="line">tcpdump -x -n -v -s 0 -i any src host srcIP and dst host dstIP and port portnum -w demo.cap</span><br><span class="line">// 环回网口</span><br><span class="line">tcpdump -x -n -v -s 0 -i lo -w demo.cap</span><br><span class="line">// 指定协议类型</span><br><span class="line">tcpdump -x -n -v -s 0 -i any ether proto 56320 -w demo.cap</span><br><span class="line">// 指定物理地址</span><br><span class="line">tcpdump -x -n -v -s 0 -i eth2 not tcp and not udp and ether host macaddr -w demo.cap</span><br><span class="line"></span><br><span class="line">tcpdump -x -n -v -s 0 -i any \(host IP and port 20015 \) or \(host IP \) -w demo.cap</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-n</td>
<td>对地址以数字方式显式，否则显式为主机名，也就是说-n选项不做主机名解析</td>
</tr>
<tr>
<td>-v</td>
<td>当分析和打印的时候，产生详细的输出</td>
</tr>
<tr>
<td>-s len</td>
<td>设置tcpdump的数据包抓取长度为len，-s 0抓取完整的数据包</td>
</tr>
<tr>
<td>-i interface</td>
<td>指定tcpdump需要监听的网口，any表示监听所有网络接口</td>
</tr>
<tr>
<td>-w</td>
<td>将抓包数据输出到文件中而不是标准输出</td>
</tr>
<tr>
<td>ether proto 56320</td>
<td>指令协议类型</td>
</tr>
<tr>
<td>ether host macaddr</td>
<td>指定物理地址</td>
</tr>
<tr>
<td>portrange port1-port2</td>
<td>指定端口范围</td>
</tr>
</tbody>
</table>
<p>wireshark抓包过滤指定的字节数据     <a href="https://blog.csdn.net/andrewgithub/article/details/103444611">https://blog.csdn.net/andrewgithub/article/details/103444611</a></p>
<p>data[61:3]==0a:39:00</p>
<p>data数据报文中，以第61字节开始，之后的3个字节的数据为 0a:39:00</p>
<p>IP分片报文中端口信息在data数据中</p>
<h6 id="2-strace">2. strace</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strace -ff -tt -T -o <span class="built_in">log</span> -p 17720</span><br><span class="line">strace -ft -o <span class="built_in">log</span> -p 35332</span><br><span class="line">// 跟踪单个线程</span><br><span class="line">strace -tt -T -o strace.log -p pid(线程的pid)</span><br><span class="line">// 跟踪整个进程</span><br><span class="line">strace -f -tt -T -o strace.log -p pid(进程的pid)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f</td>
<td>跟踪子线程</td>
</tr>
<tr>
<td>-ff</td>
<td>跟踪子线程，每个线程独立文件</td>
</tr>
<tr>
<td>-t</td>
<td>表示时间精确到秒(每秒记录一次)</td>
</tr>
<tr>
<td>-tt</td>
<td>表示时间精确到微秒(每微秒记录一次)</td>
</tr>
<tr>
<td>-T</td>
<td>记录各个系统调用花费的时间，精确到微秒</td>
</tr>
<tr>
<td>-o</td>
<td>表示将追踪结果输出的一个文件</td>
</tr>
<tr>
<td>-p</td>
<td>pid</td>
</tr>
</tbody>
</table>
<h6 id="3-top">3. top</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查线程的CPU占用率</span></span><br><span class="line">top -H -p pid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抓某时刻CPU升高的调用栈信息</span></span><br><span class="line"><span class="comment"># 实时查询CPU</span></span><br><span class="line"><span class="built_in">nohup</span> top -H -d 1 -b -n 600 -p pid &gt; top_cpu.log</span><br><span class="line"><span class="comment"># 实时查询调用栈</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> gstack tid(pid);<span class="built_in">date</span>;<span class="built_in">sleep</span> 1;<span class="keyword">done</span> &gt; stack.log</span><br><span class="line"><span class="comment"># 与上面查询调用栈的方式结合分析</span></span><br><span class="line">perf record -a -F 1000 -g -e cycles (-t tid) -p pid <span class="built_in">sleep</span> 60</span><br></pre></td></tr></table></figure>
<h6 id="4-iptables">4. iptables</h6>
<p>iptables是Linux上常见的防火墙软件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-A 规则链的末尾加入新规则</span><br><span class="line">-D 删除某一个规则</span><br><span class="line">INPUT链：处理输入数据包 </span><br><span class="line">OUTPUT链：处理输出数据包</span><br><span class="line">-s 匹配源地址</span><br><span class="line">-d 匹配目的地址</span><br><span class="line">-p 匹配协议，如tcp,udp,icmp</span><br><span class="line">--sport 匹配源端口</span><br><span class="line">--dport 匹配目的端口</span><br><span class="line">-j 指定动作，ACCEPT 接收数据包;DROP 丢弃数据包</span><br><span class="line"></span><br><span class="line">iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目的IP/目的子网&gt; --dport 目的端口 -j 动作</span><br><span class="line"></span><br><span class="line">iptables -L -n --line-number</span><br><span class="line">iptables -A INPUT -p tcp --dport 1024:65535 -j drop</span><br><span class="line">iptables -A OUTPUT -p tcp -s srcIP -d dstIP --dport 20000:20050 -j drop</span><br><span class="line">iptables -D OUTPUT num</span><br></pre></td></tr></table></figure>
<h6 id="5-netstat">5. netstat</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep -aE <span class="string">&quot;Recv-Q&quot;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a, --all</td>
<td>display all sockets (default: connected)</td>
</tr>
<tr>
<td>-n, --numeric</td>
<td>don’t resolve names(-n会显示端口，不加显示的是协议名)</td>
</tr>
<tr>
<td>-p, --programs</td>
<td>display PID/Program name for sockets</td>
</tr>
<tr>
<td></td>
<td><Socket>={-t|–tcp} {-u|–udp}</td>
</tr>
<tr>
<td>-W, --wide</td>
<td>don’t truncate IP addresses(显示IP地址全名)</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb使用</title>
    <url>/zhoukaiqi/ffde21da3a9c/</url>
    <content><![CDATA[<p>本文介绍了gdb的常见用法。</p>
<span id="more"></span>
<h6 id="1、入参与返回值">1、入参与返回值</h6>
<table>
<thead>
<tr>
<th style="text-align:left">CPU</th>
<th style="text-align:left">入参</th>
<th style="text-align:left">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">x86</td>
<td style="text-align:left">ebp+8, ebp+12, ebp+16, ebp+20</td>
<td style="text-align:left">eax</td>
</tr>
<tr>
<td style="text-align:left">x86_64</td>
<td style="text-align:left">rdi, rsi, rdx, rcx, r8, r9</td>
<td style="text-align:left">rax</td>
</tr>
<tr>
<td style="text-align:left">arm64</td>
<td style="text-align:left">x0, x1, x2, x3, x4, x5, x6, x7</td>
<td style="text-align:left">x0</td>
</tr>
</tbody>
</table>
<p>返回值需要在执行finish后查看</p>
<h6 id="2、常见命令">2、常见命令</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb -q bin                                   // 启动时不显示提示信息</span><br><span class="line">handle SIG35 SIG36 SIGUSR2 nostop noprint    // 屏蔽某些信号</span><br><span class="line"><span class="built_in">set</span> height 0                                 // 不限制输出行数</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">print</span> pretty on                          // 美化结构体打印</span><br><span class="line">i thread                                     // 查看所有线程信息</span><br><span class="line">thread threadno                              // 切换到指定线程</span><br><span class="line">thread apply all bt                          // 查看所有线程栈信息</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;Handle[%u], PtNo[%u]\n&quot;</span>, <span class="variable">$rdi</span>, <span class="variable">$rsi</span>  // 打印信息</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">print</span> thread-events off                  // 不显示线程启动和退出信息</span><br><span class="line">call getpid()                                // 获取拉起进程的pid</span><br><span class="line">shell <span class="built_in">date</span> +%H:%M:%S.%N                      // 加shell可以执行linux命令</span><br><span class="line">i r                                          // 查看寄存器信息</span><br><span class="line">generate-core-file                           // 生成core文件</span><br><span class="line">bt n(-n)                                     // 显示栈顶(栈底)的n层栈</span><br><span class="line">x addr                                       // 解析addr对应的函数</span><br><span class="line">x/s str                                      // 显示str对应的字符串</span><br><span class="line">x/nbx                                        // 显示n个单字节</span><br><span class="line">x/nhx                                        // 显示n个双字节</span><br><span class="line">x/nwx                                        // 显示n个4字节</span><br><span class="line">x/ngx                                        // 显示n个8字节</span><br><span class="line">frame n                                      // 切换到第n层栈帧（切换栈帧后i r查看的寄存器可能并不可信）</span><br><span class="line">disassemble func                             // 反汇编函数</span><br><span class="line">disassemble func, +n                         // 反汇编函数的指定n字节</span><br><span class="line">disassemble /m func                          // 显示源码和汇编(编译选项要加-g)</span><br><span class="line">disassemble /r func                          // 显示汇编和机器码</span><br><span class="line">disassemble /mr func                         // 显示源码、汇编和机器码</span><br><span class="line">watch  *addr                                 // 监控地址被写</span><br><span class="line">rwatch *addr                                 // 监控地址被读</span><br><span class="line">awatch *addr                                 // 监控地址被读写</span><br><span class="line">ptype /o struct xxx_type                     // 查看结构体成员的偏移量</span><br></pre></td></tr></table></figure>
<h6 id="3、条件断点">3、条件断点</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x86 32位:  b func <span class="keyword">if</span> *(unsigned int*)(<span class="variable">$ebp</span>+8) == 226 &amp;&amp; *(unsigned int*)(<span class="variable">$ebp</span>+16) == 206</span><br><span class="line">x86 64位:  b func <span class="keyword">if</span> <span class="variable">$rdi</span> == 226 &amp;&amp; <span class="variable">$rdx</span> == 206</span><br><span class="line">arm 64位:  b func <span class="keyword">if</span> <span class="variable">$x0</span> == 226 &amp;&amp; <span class="variable">$x2</span> == 206</span><br><span class="line">线程断点:  b func thread threadno <span class="keyword">if</span> condition</span><br><span class="line">字符断点:  b func <span class="keyword">if</span> *(unsigned char*)(<span class="variable">$ebp</span>+8)==<span class="string">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>
<h6 id="4、查看所有线程栈信息">4、查看所有线程栈信息</h6>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb attach <span class="number">10889</span></span><br><span class="line">handle SIG35 SIG36 SIGUSR2 nostop noprint</span><br><span class="line"><span class="built_in">set</span> height <span class="number">0</span></span><br><span class="line">i thread</span><br><span class="line">thread apply all bt</span><br><span class="line">det</span><br><span class="line">q</span><br></pre></td></tr></table></figure>
<h6 id="5、查看调用栈">5、查看调用栈</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb attach 10889</span><br><span class="line">handle SIG35 SIG36 SIGUSR2 nostop noprint</span><br><span class="line"><span class="built_in">set</span> height 0</span><br><span class="line">b func</span><br><span class="line"><span class="built_in">command</span></span><br><span class="line">bt</span><br><span class="line">det</span><br><span class="line">q</span><br><span class="line">end</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<h6 id="6、查看入参和返回值">6、查看入参和返回值</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb attach pid   ----------//进程的pid由ps -ef | grep xxx查询到</span><br><span class="line">handle SIG35 SIG36 SIGUSR2 nostop noprint</span><br><span class="line"><span class="built_in">set</span> height 0</span><br><span class="line">define oops</span><br><span class="line">bt        ----------// 显示调用栈</span><br><span class="line">i r       ----------// 显示寄存器信息，主要看入参，x86 32位进程看入参要替换成x/8wx <span class="variable">$ebp</span>+8</span><br><span class="line">fin       ----------// 表示执行完当前打断点的函数func</span><br><span class="line">i r       ----------// 在fin之后表示显示返回值，x86，x86_64，arm的返回值依次对应eax,rax,x0</span><br><span class="line">det</span><br><span class="line">q</span><br><span class="line">end</span><br><span class="line">b func    ----------// func即打断点的函数</span><br><span class="line"><span class="built_in">command</span></span><br><span class="line">oops</span><br><span class="line">end</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<h6 id="7、查看出参">7、查看出参</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb attach `pidof demo`</span><br><span class="line">handle SIG35 SIG36 SIGUSR2 nostop noprint</span><br><span class="line"><span class="built_in">set</span> heigh 0</span><br><span class="line">define ops</span><br><span class="line">bt</span><br><span class="line">i r</span><br><span class="line">x/s <span class="variable">$rdi</span></span><br><span class="line">p <span class="variable">$rsi</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$a</span>=<span class="variable">$rdx</span></span><br><span class="line">fin</span><br><span class="line">x/5wx <span class="variable">$a</span></span><br><span class="line">x/s <span class="variable">$a</span></span><br><span class="line">p *(unsigned int*)(<span class="variable">$a</span>+16)</span><br><span class="line">det</span><br><span class="line">q</span><br><span class="line">end</span><br><span class="line">b func</span><br><span class="line"><span class="built_in">command</span></span><br><span class="line">ops</span><br><span class="line">end</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<h6 id="8、在函数func2执行之后再执行函数func1">8、在函数<code>func2</code>执行之后再执行函数<code>func1</code></h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb attach `pidof demo`</span><br><span class="line">handle SIG35 SIG36 SIGUSR2 nostop noprint</span><br><span class="line"><span class="built_in">set</span> height 0</span><br><span class="line">b func1</span><br><span class="line"><span class="built_in">command</span></span><br><span class="line">bt</span><br><span class="line">det</span><br><span class="line">q</span><br><span class="line">end</span><br><span class="line"><span class="built_in">disable</span> 1</span><br><span class="line">b func2</span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="built_in">enable</span> 1</span><br><span class="line">bt</span><br><span class="line">c</span><br><span class="line">end</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<h6 id="9、重定向到linux屏幕">9、重定向到linux屏幕</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重定向后，调用printf的打印会输出到指定的屏幕</span></span><br><span class="line">gdb attach 10889</span><br><span class="line">handle SIG35 SIG36 SIGUSR2 nostop noprint</span><br><span class="line"><span class="built_in">set</span> height 0</span><br><span class="line">call (int)close(1)</span><br><span class="line">call (int)close(2)</span><br><span class="line"><span class="comment"># 此处的路径用tty查询</span></span><br><span class="line">call (int)(<span class="string">&quot;/dev/tty1&quot;</span>, 2)</span><br><span class="line">detach</span><br><span class="line">q</span><br></pre></td></tr></table></figure>
<h6 id="10、扫描core文件1">10、扫描core文件1</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">define mem_scan</span><br><span class="line">    <span class="built_in">set</span> logging file xxx.txt</span><br><span class="line">    <span class="built_in">set</span> logging on</span><br><span class="line">    <span class="built_in">set</span> logging overwrite on</span><br><span class="line">    <span class="built_in">set</span> height 0</span><br><span class="line">    <span class="built_in">set</span> <span class="built_in">print</span> pretty on</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$g_index</span> = 0</span><br><span class="line">    <span class="keyword">while</span> (xxx)</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;**************************\n&quot;</span></span><br><span class="line">        // 具体扫描实现</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;**************************\n&quot;</span></span><br><span class="line">        <span class="built_in">set</span> = <span class="variable">$g_index</span> + 1</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">set</span> logging off</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">mem_scan</span><br></pre></td></tr></table></figure>
<h6 id="11、扫描core文件2">11、扫描core文件2</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb attach pid</span><br><span class="line"><span class="built_in">set</span> height 0</span><br><span class="line">handle SIG35 SIG36 SIGUSR2 nostop noprint</span><br><span class="line"><span class="comment"># 数组</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$array</span> = &#123;1, 3, 5, 7, 9&#125;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$num</span> = sizeof(<span class="variable">$array</span>) / 4</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$index</span> = 0</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$index</span> &lt; <span class="variable">$num</span>)</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$linkNo</span> = <span class="variable">$array</span>[<span class="variable">$index</span>]</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$tmp</span> = *(unsigned long*)&amp;g_state + <span class="variable">$linkNo</span> * 8</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$plane</span> = *(unsigned long*)<span class="variable">$tmp</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;Plane[%u]\n&quot;</span>, <span class="variable">$plane</span></span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$index</span> = <span class="variable">$index</span> + 1</span><br><span class="line">end</span><br><span class="line">det</span><br><span class="line">q</span><br></pre></td></tr></table></figure>
<h6 id="12、内存搜索">12、内存搜索</h6>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">搜索某块内存中的value</span><br><span class="line">find [/sn] start_addr, +len, val1 [, val2, ...]</span><br><span class="line">find [/sn] start_addr, end_addr, val1 [, val2, ...]</span><br><span class="line">s：表示搜索value所占的字节数，b/h/w/g</span><br><span class="line">n：表示最多输出n个查找结果</span><br><span class="line"></span><br><span class="line">具体示例</span><br><span class="line"><span class="number">0x7f55fa12ce70</span>: <span class="number">0x12345678</span> <span class="number">0x00000000</span> <span class="number">0x00000000</span> <span class="number">0x12340000</span></span><br><span class="line"><span class="number">0x7f55fa12ce80</span>: <span class="number">0xdeaddead</span> <span class="number">0x00000000</span> <span class="number">0xdeaddead</span> <span class="number">0x00000000</span></span><br><span class="line">(gdb) find /w2 <span class="number">0x7f55fa12ce70</span>, +<span class="number">0x20</span>, <span class="number">0xdeaddead</span></span><br><span class="line"><span class="number">0x7f55fa12ce80</span></span><br><span class="line"><span class="number">0x7f55fa12ce88</span></span><br><span class="line"><span class="number">2</span> patterns found.</span><br><span class="line">(gdb) find /w2 <span class="number">0x7f55fa12ce70</span>, <span class="number">0x7f55fa12ce90</span>, <span class="number">0xdeaddead</span></span><br><span class="line"><span class="number">0x7f55fa12ce80</span></span><br><span class="line"><span class="number">0x7f55fa12ce88</span></span><br><span class="line"><span class="number">2</span> patterns found.</span><br></pre></td></tr></table></figure>
<h6 id="13、gdb-shell脚本">13、gdb shell脚本</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">RunGDB</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> cmdFile=gdb.txt</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span> &gt; <span class="string">&quot;<span class="variable">$cmdFile</span>&quot;</span></span><br><span class="line">    gdb -q -batch -x <span class="string">&quot;<span class="variable">$cmdFile</span>&quot;</span>  2&gt;/dev/null</span><br><span class="line">    <span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$cmdFile</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">AttachByPid</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> pid=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> gdbCmdPre=<span class="string">&quot;</span></span><br><span class="line"><span class="string">attach <span class="variable">$pid</span></span></span><br><span class="line"><span class="string">set height 0</span></span><br><span class="line"><span class="string">set print thread-events off</span></span><br><span class="line"><span class="string">set print inferior-events off</span></span><br><span class="line"><span class="string">handle SIG35 SIG36 SIGUSR2 nostop noprint&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> gdbCmd=<span class="string">&quot;<span class="variable">$gdbCmdPre</span></span></span><br><span class="line"><span class="string">b FuncD&quot;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">command</span></span><br><span class="line"><span class="string">    bt</span></span><br><span class="line"><span class="string">    i r $rsp $rbp</span></span><br><span class="line"><span class="string">    set $tmprbp = $rbp</span></span><br><span class="line"><span class="string">    set $index = 0</span></span><br><span class="line"><span class="string">    while $index &lt; 4</span></span><br><span class="line"><span class="string">        set $nextrbp = *(unsigned long*)$tmprbp</span></span><br><span class="line"><span class="string">        set $func = *(unsigned long*)($tmprbp + 8)</span></span><br><span class="line"><span class="string">        printf &quot;rbp[0x%lx], func[0x%lx]\n&quot;, $tmprbp, $func</span></span><br><span class="line"><span class="string">        set $tmprbp = $nextrbp</span></span><br><span class="line"><span class="string">        set $index = $index + 1</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">    det</span></span><br><span class="line"><span class="string">    q</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">c&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        RunGDB <span class="string">&quot;<span class="variable">$gdbCmd</span>&quot;</span></span><br><span class="line">        <span class="built_in">sleep</span> 2</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AttachByPid <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>实际使用需要修改commmad和end之间的内容。</p>
<h6 id="14、tips">14、tips</h6>
<p>frame切换栈帧后，挥发性寄存器的值就容易不准确。</p>
<blockquote>
<p>总而言之，一些挥发性寄存器的值可能随着栈帧的展开而不断的累加错误。也就是这里所说的：如果栈帧越靠外层，这些挥发性寄存器的值就越容易不准确。<br>
Usually ABIs reserve some registers as not needed to be saved by the callee (a.k.a.: “caller-saved”, “call-clobbered” or “volatile” registers). It may therefore not be possible for GDB to know the value a register had before the call (in other words, in the outer frame), if the register value has since been changed by the callee. GDB tries to deduce where the inner frame saved (“callee-saved”) registers, from the debug info, unwind info, or the machine code generated by your compiler. If some register is not saved, and GDB knows the register is “caller-saved” (via its own knowledge of the ABI, or because the debug/unwind info explicitly says the register’s value is undefined), GDB displays ‘<not saved>’ as the register’s value. With targets that GDB has no knowledge of the register saving convention, if a register was not saved by the callee, then its value and location in the outer frame are assumed to be the same of the inner frame. This is usually harmless, because if the register is call-clobbered, the caller either does not care what is in the register after the call, or has code to restore the value that it does care about. Note, however, that if you change such a register in the outer frame, you may also be affecting the inner frame. <strong>Also, the more “outer” the frame is you’re looking at, the more likely a call-clobbered register’s value is to be wrong, in the sense that it doesn’t actually represent the value the register had just before the call</strong>.</p>
</blockquote>
<p><a href="https://www.cnblogs.com/tsecer/p/11371549.html">https://www.cnblogs.com/tsecer/p/11371549.html</a></p>
<p>参考：<a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/info-function.html">https://wizardforcel.gitbooks.io/100-gdb-tips/content/info-function.html</a></p>
]]></content>
      <categories>
        <category>gdb</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>调用者与被调用者的寄存器优化</title>
    <url>/zhoukaiqi/e89ef2b48b02/</url>
    <content><![CDATA[<p><strong>问题背景</strong></p>
<p>最近遇到了一个少见的热补丁问题，叶子函数(FuncChild)打上热补丁后，进程在调用父函数(FuncFather)时会复位。</p>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncFather</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function FuncFather:</span><br><span class="line">   <span class="number">0x0000000000687f10</span> &lt;+<span class="number">0</span>&gt;:     adrp   x3, <span class="number">0x1f8e000</span></span><br><span class="line">   <span class="number">0x0000000000687f14</span> &lt;+<span class="number">4</span>&gt;:     stp    x29, x30, [sp, #<span class="number">-32</span>]!</span><br><span class="line">   <span class="number">0x0000000000687f18</span> &lt;+<span class="number">8</span>&gt;:     mov    x4, x2</span><br><span class="line">   <span class="number">0x0000000000687f1c</span> &lt;+<span class="number">12</span>&gt;:    mov    x29, sp</span><br><span class="line">   <span class="number">0x0000000000687f20</span> &lt;+<span class="number">16</span>&gt;:    ldr    x2, [x3, #<span class="number">744</span>]</span><br><span class="line">   <span class="number">0x0000000000687f24</span> &lt;+<span class="number">20</span>&gt;:    mov    x5, x1</span><br><span class="line">   <span class="number">0x0000000000687f28</span> &lt;+<span class="number">24</span>&gt;:    add    x1, x29, #<span class="number">0x17</span></span><br><span class="line">   <span class="number">0x0000000000687f2c</span> &lt;+<span class="number">28</span>&gt;:    ldr    x6, [x2]</span><br><span class="line">   <span class="number">0x0000000000687f30</span> &lt;+<span class="number">32</span>&gt;:    str    x6, [x29, #<span class="number">24</span>]</span><br><span class="line">   <span class="number">0x0000000000687f34</span> &lt;+<span class="number">36</span>&gt;:    mov    x6, #<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0000000000687f38</span> &lt;+<span class="number">40</span>&gt;:    bl     <span class="number">0x687de0</span> &lt;FuncChild&gt;</span><br><span class="line">   <span class="number">0x0000000000687f3c</span> &lt;+<span class="number">44</span>&gt;:    cbz    w0, <span class="number">0x687f70</span> &lt;FuncFather+<span class="number">96</span>&gt;</span><br><span class="line">   <span class="number">0x0000000000687f40</span> &lt;+<span class="number">48</span>&gt;:    ldrb   w0, [x29, #<span class="number">23</span>]</span><br><span class="line">   <span class="number">0x0000000000687f44</span> &lt;+<span class="number">52</span>&gt;:    strb   w0, [x4]</span><br><span class="line">   <span class="number">0x0000000000687f48</span> &lt;+<span class="number">56</span>&gt;:    ldrb   w0, [x5, #<span class="number">25</span>]</span><br><span class="line">   <span class="number">0x0000000000687f4c</span> &lt;+<span class="number">60</span>&gt;:    cmp    w0, #<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0000000000687f50</span> &lt;+<span class="number">64</span>&gt;:    cset   w0, eq <span class="comment">// eq = none</span></span><br><span class="line">=&gt; <span class="number">0x0000000000687f54</span> &lt;+<span class="number">68</span>&gt;:    ldr    x3, [x3, <span class="number">744</span>]</span><br><span class="line">(gdb) i r x3</span><br><span class="line">x3            <span class="number">0x0000000000018000</span>        <span class="number">0x0000000000018000</span></span><br></pre></td></tr></table></figure>
<p>异常的指令是<code>0x0000000000687f54 &lt;+68&gt;:    ldr    x3, [x3, 744]</code>，x3寄存器是0x18000。</p>
<p>FuncFather在之前读写过x3寄存器的只有<code>0x0000000000687f20 &lt;+16&gt;:    ldr    x2, [x3, #744]</code></p>
<p>所以，即使x3寄存器不可访问，也应该在FuncFather+16指令时出现异常，这里存在了矛盾点。合理的怀疑是FuncChild修改了x3寄存器，从FuncChild的汇编分也证明了这一点。</p>
<p>为什么会出现被调用者复用了调用者的寄存器且不恢复，查询了相关资料予以说明。</p>
<p><strong>相关介绍</strong></p>
<p>对于函数调用，假设存在这样两个函数 funA 和 funB，其中 funA 调用 funB 函数，这里称 funA 为 caller（调用者），funB 为 callee（被调用者），funA 和 funB 都使用了相同的寄存器 R。</p>
<p><img src="https://pic2.zhimg.com/80/v2-e7b7788746c1d6c99e49d84a79c2f8c1_720w.jpg" alt=""></p>
<p>寄存器R被funB修改了，funA再使用相同寄存器R时已经是错误的数据。</p>
<p>如果 funA 在调用 funB 前保存寄存器 R 中的数据，funB 返回后再将数据恢复到 R 中，或者 funB 先保存 R 中原有的数据，然后在返回前恢复，就可以解决这类问题。</p>
<p><strong>唯一的调用约定</strong></p>
<p>那寄存器该由 caller 还是 callee 来保存？这就需要遵循函数的调用约定（call convention），不同的 ABI 和不同的平台，函数的调用约定是不一样的，对于 Linux 来说，它遵循的是 System V ABI 的 call convention，x86_64 平台下函数调用约定有且只有一种，调用者 caller 和被调用者 callee 需要对相应的寄存器进行保存和恢复操作：</p>
<ul>
<li>Caller-save registers : RDI, RSI, RDX, RCX, R8, R9, RAX, R10, R11</li>
<li>Callee-save registers : RBX, RBP, R12, R13, R14, R15</li>
</ul>
<p><strong>调用约定，gcc 它遵守了吗？</strong></p>
<p>设问：当函数实现很简单，只用到了少量寄存器，那没使用到的还需要保存吗？</p>
<p>答案：it depends。根据编译选项决定。</p>
<p>众所周知，GCC 编译器有 -O0、-O1、-O2 和 -Ox 等编译优化选项，优化范围和深度随 x 增大而增大（-O0是不优化，其中隐含的意思是，它会严格遵循 ABI 中的调用约定，对所有使用的寄存器进行保存和恢复）。</p>
<p>Linux 内核选用的都是 -O2 优化。GCC 会选择性的不遵守调用约定，也就是设问里提到的，不需要保存没使用到的寄存器。</p>
<p><strong>当【运行时替换】撞见【调用约定】</strong></p>
<p>GCC 之所以可以做这个优化，是因为 GCC 高屋建瓴，了解程序的执行流。当它知道 callee，caller 的寄存器分配情况，就会大胆且安全地做各种优化。</p>
<p>但是，运行时替换破坏了这个假设，GCC 所掌握的 callee 信息，极有可能是错误的。那么这些优化可能会引发严重问题。这里以一个具体的实例进行详细说明，<strong>（ x86_64 平台）</strong>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译命令：gcc leaf.c -o leaf -O2 -g  (kernel 采用的是 O2 优化选项)</span></span><br><span class="line"><span class="comment">// 执行过程：./leaf</span></span><br><span class="line"><span class="comment">// 编译选项 -fipa-ra</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> noinline __attribute__((noinline))</span></span><br><span class="line"></span><br><span class="line">noinline <span class="type">int</span> <span class="title function_">FuncC</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noinline <span class="type">int</span> <span class="title function_">FuncB</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noinline <span class="type">int</span> <span class="title function_">NewFuncB</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> FuncC(x * <span class="number">2</span>) * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noinline <span class="type">int</span> <span class="title function_">FuncA</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="keyword">volatile</span> temp = FuncB(x);</span><br><span class="line">    <span class="keyword">return</span> x + temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mprotect传入的地址必须页对齐</span></span><br><span class="line">    <span class="type">void</span> *startAddr = (<span class="type">void</span> *)((<span class="type">unsigned</span> <span class="type">long</span>)&amp;FuncB &amp; (~<span class="number">0xFFF</span>));</span><br><span class="line">    <span class="keyword">if</span> (mprotect(startAddr, <span class="number">15</span>, PROT_WRITE | PROT_EXEC | PROT_READ)) &#123;</span><br><span class="line">        perror(<span class="string">&quot;mprotect&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 利用 jump 指令将函数 FuncB 替换为 NewFuncB 函数 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *pucInst = (<span class="type">unsigned</span> <span class="type">char</span> *)FuncB;</span><br><span class="line">    *pucInst = <span class="number">0xe9</span>; <span class="comment">// 短跳转jmp指令机器码</span></span><br><span class="line">    pucInst++;</span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">int</span>*)pucInst = ((<span class="type">unsigned</span> <span class="type">long</span>)&amp;NewFuncB - (<span class="type">unsigned</span> <span class="type">long</span>)&amp;FuncB - <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, FuncA(x));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>程序解释：该程序是对输入的数字进行计算，运行时利用 jump 指令将程序中的函数 b 替换为 newb 函数，即，将 y = x + x 计算过程替换为 y = x + (2x) ^ 3 * x；</li>
<li>程序编译：gcc leaf.c -o leaf -O2 -g，这里我们采用的是与编译内核相同的优化选项 -O2；</li>
<li>程序执行：./leaf，输入参数：4，输出结果：132；</li>
<li>程序错误：132是错误的结果，应该是 130，而且直接调用 newb 函数编译执行的结果是 130。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncA</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function FuncA:</span><br><span class="line">   <span class="number">0x0000000000001260</span> &lt;+<span class="number">0</span>&gt;:     endbr64</span><br><span class="line">   <span class="number">0x0000000000001264</span> &lt;+<span class="number">4</span>&gt;:     sub    $<span class="number">0x10</span>,%rsp</span><br><span class="line">   <span class="number">0x0000000000001268</span> &lt;+<span class="number">8</span>&gt;:     callq  <span class="number">0x1220</span> &lt;FuncB&gt;</span><br><span class="line">   <span class="number">0x000000000000126d</span> &lt;+<span class="number">13</span>&gt;:    mov    %eax,<span class="number">0xc</span>(%rsp)</span><br><span class="line">   <span class="number">0x0000000000001271</span> &lt;+<span class="number">17</span>&gt;:    mov    <span class="number">0xc</span>(%rsp),%eax</span><br><span class="line">   <span class="number">0x0000000000001275</span> &lt;+<span class="number">21</span>&gt;:    add    $<span class="number">0x10</span>,%rsp</span><br><span class="line">   <span class="number">0x0000000000001279</span> &lt;+<span class="number">25</span>&gt;:    add    %edi,%eax</span><br><span class="line">   <span class="number">0x000000000000127b</span> &lt;+<span class="number">27</span>&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disassemble FuncB</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function FuncB:</span><br><span class="line">   <span class="number">0x0000000000001220</span> &lt;+<span class="number">0</span>&gt;:     endbr64</span><br><span class="line">   <span class="number">0x0000000000001224</span> &lt;+<span class="number">4</span>&gt;:     mov    %edi,%eax</span><br><span class="line">   <span class="number">0x0000000000001226</span> &lt;+<span class="number">6</span>&gt;:     retq</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>
<p>当FuncA通过FuncB跳转到NewFuncB后：edi = 2 * edi，返回到FuncA时edi寄存器已经被修改了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncA</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function FuncA:</span><br><span class="line">   <span class="number">0x0000000008001260</span> &lt;+<span class="number">0</span>&gt;:     endbr64</span><br><span class="line">   <span class="number">0x0000000008001264</span> &lt;+<span class="number">4</span>&gt;:     sub    $<span class="number">0x10</span>,%rsp</span><br><span class="line">=&gt; <span class="number">0x0000000008001268</span> &lt;+<span class="number">8</span>&gt;:     callq  <span class="number">0x8001220</span> &lt;FuncB&gt;</span><br><span class="line">   <span class="number">0x000000000800126d</span> &lt;+<span class="number">13</span>&gt;:    mov    %eax,<span class="number">0xc</span>(%rsp)</span><br><span class="line">   <span class="number">0x0000000008001271</span> &lt;+<span class="number">17</span>&gt;:    mov    <span class="number">0xc</span>(%rsp),%eax</span><br><span class="line">   <span class="number">0x0000000008001275</span> &lt;+<span class="number">21</span>&gt;:    add    $<span class="number">0x10</span>,%rsp</span><br><span class="line">   <span class="number">0x0000000008001279</span> &lt;+<span class="number">25</span>&gt;:    add    %edi,%eax</span><br><span class="line">   <span class="number">0x000000000800127b</span> &lt;+<span class="number">27</span>&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) si</span><br><span class="line">(gdb) disassemble FuncB</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function FuncB:</span><br><span class="line">=&gt; <span class="number">0x0000000008001220</span> &lt;+<span class="number">0</span>&gt;:     jmpq   <span class="number">0x8001240</span> &lt;NewFuncB&gt;</span><br><span class="line">   <span class="number">0x0000000008001225</span> &lt;+<span class="number">5</span>&gt;:     clc</span><br><span class="line">   <span class="number">0x0000000008001226</span> &lt;+<span class="number">6</span>&gt;:     retq</span><br><span class="line">(gdb) si</span><br><span class="line">(gdb) disassemble NewFuncB</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function NewFuncB:</span><br><span class="line">=&gt; <span class="number">0x0000000008001240</span> &lt;+<span class="number">0</span>&gt;:     endbr64</span><br><span class="line">   <span class="number">0x0000000008001244</span> &lt;+<span class="number">4</span>&gt;:     mov    %edi,%edx</span><br><span class="line">   <span class="number">0x0000000008001246</span> &lt;+<span class="number">6</span>&gt;:     lea    (%rdi,%rdi,<span class="number">1</span>),%edi</span><br><span class="line">   <span class="number">0x0000000008001249</span> &lt;+<span class="number">9</span>&gt;:     callq  <span class="number">0x8001230</span> &lt;FuncC&gt;</span><br><span class="line">   <span class="number">0x000000000800124e</span> &lt;+<span class="number">14</span>&gt;:    imul   %edx,%eax</span><br><span class="line">   <span class="number">0x0000000008001251</span> &lt;+<span class="number">17</span>&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">ret = <span class="number">132</span></span><br><span class="line">[Inferior <span class="number">1</span> (process <span class="number">292</span>) exited normally]</span><br></pre></td></tr></table></figure>
<p>查找相关资料，发现了这个<code> -fipa-ra</code> 选项，可以说它是优化的幕后主使。</p>
<p>如果开启这个选项，callee 中如果没有使用到 caller 使用的寄存器，就没有必要保存这些寄存器，前提是，callee 与 caller 在同一个.c中而且 callee 函数比 caller 先被编译，这样才可能出现前面的优化。如果开启了 -O2 及以上的编译优化选项，则会使能 -fipa-ra 选项，然而，如果开启了 -p 或者 -pg 这些选项，或者，无法明确 callee 所使用的寄存器，-fipa-ra 选项会被禁用。</p>
<p>加上<code>-fno-ipa-ra</code>屏蔽该优化，运行结果正常。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">xxx@ubuntu:src$ gcc -Q --help=optimizers -O2 | grep fipa-ra</span><br><span class="line">  -fipa-ra                              [enabled]</span><br><span class="line">xxx@ubuntu:src$ gcc leaf.c -o leaf -O2 -g -fno-ipa-ra</span><br><span class="line">xxx@ubuntu:src$ ./leaf</span><br><span class="line">ret = <span class="number">130</span></span><br><span class="line">xxx@ubuntu:src$</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/397027508">https://zhuanlan.zhihu.com/p/397027508</a></p>
]]></content>
      <categories>
        <category>assembly</category>
      </categories>
      <tags>
        <tag>assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>符号解析</title>
    <url>/zhoukaiqi/6af7315879b9/</url>
    <content><![CDATA[<p>本文介绍了链接中的符号解析过程。</p>
<span id="more"></span>
<h4 id="1-静态库">1 静态库</h4>
<p>将.o目标文件打包成.a文件即静态库。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打包静态库</span></span><br><span class="line">ar rcs libtest.a test1.o test2.o</span><br><span class="line"><span class="comment">// 加了-static会把系统的.a比如libc.a中需要的.o也链接到main中</span></span><br><span class="line">gcc main.o -<span class="type">static</span> -L. -ltest -o main1</span><br><span class="line">gcc main.o -L. -ltest -o main2</span><br><span class="line">-rwx------. <span class="number">1</span> root root <span class="number">750</span>K Jul  <span class="number">3</span> <span class="number">22</span>:<span class="number">49</span> main1</span><br><span class="line">-rwx------. <span class="number">1</span> root root  <span class="number">17</span>K Jul  <span class="number">3</span> <span class="number">22</span>:<span class="number">51</span> main2</span><br><span class="line"><span class="comment">// main1是完全链接的可执行目标文件，所以比较大；main2依赖的函数可以从so中获取，所以相对比较小</span></span><br><span class="line">[root@<span class="number">192</span> demo]<span class="meta"># ldd main1</span></span><br><span class="line">        not a dynamic executable</span><br><span class="line">[root@<span class="number">192</span> demo]<span class="meta"># ldd main2</span></span><br><span class="line">        linux-vdso.so<span class="number">.1</span> (<span class="number">0x00007ffccebc1000</span>)</span><br><span class="line">        libc.so<span class="number">.6</span> =&gt; /lib64/libc.so<span class="number">.6</span> (<span class="number">0x00007f7238d61000</span>)</span><br><span class="line">        /lib64/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span> (<span class="number">0x00007f7238f2e000</span>)</span><br></pre></td></tr></table></figure>
<h4 id="2-符号解析">2 符号解析</h4>
<p>在符号解析阶段，链接器从左到右按照它们在命令行上出现的顺序来扫描可重定位目标文件和.a静态库文件。</p>
<h4 id="2-1-建立三个空的集合">2.1 建立三个空的集合</h4>
<ul>
<li>
<p>集合E：放入该集合中的文件，后续将用于合成最终的可执行文件</p>
</li>
<li>
<p>集合U：当前所有未解析的引用符号</p>
</li>
<li>
<p>集合D：当前所有定义的符号</p>
</li>
</ul>
<blockquote>
<p>注：E\U\D，此处分别表示 Empty, Undefined, Defined</p>
</blockquote>
<h4 id="2-2-从左到右依次扫描每一个文件">2.2 从左到右依次扫描每一个文件</h4>
<p>1） 按命令行指定顺序依次处理每个目标文件和库文件；</p>
<p>2） 如果为.o文件，将其加入集合E，将其所有符号加入D，将引用但未定义的符号加入U；</p>
<p>3） 如果为静态库文件，实际链接过程中是拆成单个的.o文件来扫描的。假设静态库中的第一个目标文件是 m 。</p>
<h5 id="第一步：匹配">第一步：匹配</h5>
<p>检查集合 U 中未定义的符号是否在目标文件 m 的符号表中</p>
<p>若没有，抛弃 m，继续扫描静态库中的下一个目标文件；若有，则</p>
<ul>
<li>将 m 加入集合 E 中</li>
<li>将 m 中定义的符号添加集合 D 中</li>
<li>将 m 中引用但未定义的符号，添加到集合 U 中</li>
</ul>
<h5 id="第二步：重复">第二步：重复</h5>
<p>继续扫描静态库中的下一个目标文件，重复上一步的匹配过程，直到 U 和 D 都不再发生变化</p>
<p>4） 如果为动态库文件，移除U中得到解析的符号，在D中加入动态库中符号；</p>
<p>5） 若集合U最终为空，链接成功，对E中文件进行合并和重定位处理，生成可执行文件，否则报告链接出错。</p>
<h4 id="3-举例说明">3 举例说明</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># main.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">test1</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">test2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test1();</span><br><span class="line">    test2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># test1.c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># test2.cc</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test2\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译命令：<code>gcc main.c test1.c test2.c -c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc main.c test1.c test2.c -c</span><br><span class="line">Coder:test$ ll *.o</span><br><span class="line">-rw-r--r-- <span class="number">1</span> coder coder <span class="number">1608</span> Jul <span class="number">17</span> <span class="number">22</span>:<span class="number">57</span> main.o</span><br><span class="line">-rw-r--r-- <span class="number">1</span> coder coder <span class="number">1680</span> Jul <span class="number">17</span> <span class="number">22</span>:<span class="number">57</span> test1.o</span><br><span class="line">-rw-r--r-- <span class="number">1</span> coder coder <span class="number">1680</span> Jul <span class="number">17</span> <span class="number">22</span>:<span class="number">57</span> test2.o</span><br></pre></td></tr></table></figure>
<p>都是.o文件时，无顺序要求，都能编译成功。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Coder:test$ gcc main.o test1.o test2.o -o main</span><br><span class="line">Coder:test$</span><br><span class="line">Coder:test$ gcc test1.o main.o test2.o -o main</span><br><span class="line">Coder:test$</span><br></pre></td></tr></table></figure>
<p>使用静态库或者动态库时，有顺序的要求。（使用动态库时，执行程序前需要执行动态库的路径<code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./</code>）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Coder:test$ ar rcs libtest.a test1.o test2.o</span><br><span class="line">Coder:test$ gcc libtest.a main.o -o main</span><br><span class="line">/usr/bin/ld: main.o: in function `main<span class="number">&#x27;</span>:</span><br><span class="line">main.c:(.text+<span class="number">0xe</span>): undefined reference to `test1<span class="number">&#x27;</span></span><br><span class="line">/usr/bin/ld: main.c:(.text+<span class="number">0x18</span>): undefined reference to `test2<span class="number">&#x27;</span></span><br><span class="line">collect2: error: ld returned <span class="number">1</span> <span class="built_in">exit</span> status</span><br><span class="line">Coder:test$ gcc main.o libtest.a -o main</span><br><span class="line">Coder:test$</span><br><span class="line">Coder:test$</span><br><span class="line">Coder:test$ gcc -shared -fPIC test1.o test2.o -o libtest.so</span><br><span class="line">Coder:test$ gcc libtest.so main.o -o main</span><br><span class="line">/usr/bin/ld: main.o: in function `main<span class="number">&#x27;</span>:</span><br><span class="line">main.c:(.text+<span class="number">0xe</span>): undefined reference to `test1<span class="number">&#x27;</span></span><br><span class="line">/usr/bin/ld: main.c:(.text+<span class="number">0x18</span>): undefined reference to `test2<span class="number">&#x27;</span></span><br><span class="line">collect2: error: ld returned <span class="number">1</span> <span class="built_in">exit</span> status</span><br><span class="line">Coder:test$ gcc main.o libtest.so -o main</span><br><span class="line">Coder:test$ ./main</span><br><span class="line">./main: error <span class="keyword">while</span> loading shared libraries: libtest.so: cannot open shared object file: No such file or directory</span><br><span class="line">Coder:test$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./</span><br><span class="line">Coder:test$ ./main</span><br><span class="line">test1</span><br><span class="line">test2</span><br><span class="line">Coder:test$</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>link</category>
      </categories>
      <tags>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>静态链接</title>
    <url>/zhoukaiqi/7508e955a9b1/</url>
    <content><![CDATA[<p>本文介绍静态链接中的重定位。</p>
<span id="more"></span>
<h4 id="1-重定位结构体">1 重定位结构体</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> offset;    <span class="comment">/* Offset of the reference to relocate */</span></span><br><span class="line">    <span class="type">long</span> type:<span class="number">32</span>,   <span class="comment">/* Relocation type */</span></span><br><span class="line">    <span class="type">long</span> symbol:<span class="number">32</span>; <span class="comment">/* Symbol table index */</span></span><br><span class="line">    <span class="type">long</span> addend;    <span class="comment">/* Constant part of relocation expression */</span></span><br><span class="line">&#125; Elf64_Rela;</span><br><span class="line">offset：需要重定位的地址离当前函数首地址的偏移</span><br><span class="line">type：  重定位的类型（常见有R_X86_64_PC32和R_X86_64_32）</span><br><span class="line">symbol：重定位到的符号</span><br><span class="line">addend：需要重定位的地址与下一条指令的相对位置关系</span><br></pre></td></tr></table></figure>
<h4 id="2-重定位算法（伪代码）">2 重定位算法（伪代码）</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">foreach section s &#123;</span><br><span class="line">    foreach relocation entry r &#123;</span><br><span class="line">        refptr = s + r.offset;  <span class="comment">/* ptr to reference to be relocated */</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">/* Relocate a PC-relative reference */</span></span><br><span class="line">        <span class="keyword">if</span> (r.type == R_X86_64_PC32)&#123;</span><br><span class="line">            refaddr = ADDR(s) + r.offset; <span class="comment">/* ref&#x27;s run-time address */</span></span><br><span class="line">            *refptr = (<span class="type">unsigned</span>) (ADDR(r.symbol) + r.addend - refaddr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Relocate an absolute reference */</span></span><br><span class="line">        <span class="keyword">if</span> (r.type == R_X86_64_32)</span><br><span class="line">            *refptr = (<span class="type">unsigned</span>) (ADDR(r.symbol) + r.addend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>R_X86_64_PC32：重定位一个使用32位PC相对地址的引用，计算方式为：S + A - P<br>
R_X86_64_32：  重定位一个使用32位绝对地址的引用，计算方式为：S + A</p>
<blockquote>
<p>S：符号的实际地址，相当于ADDR(r.symbol)</p>
<p>A：保存在被修正位置的值，相当于r.addend</p>
<p>P：要被修正的位置，相当于ADDR(s) + r.offset</p>
</blockquote>
<h4 id="3-重定位示例">3 重定位示例</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_test;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="type">int</span> a = g_test;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test.c</span></span><br><span class="line"><span class="type">int</span> g_test = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解析出的相关信息</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[root@<span class="number">192</span> link]<span class="meta"># readelf -r main.o</span></span><br><span class="line">Relocation section <span class="string">&#x27;.rela.text&#x27;</span> at offset <span class="number">0x3c0</span> contains <span class="number">2</span> entries:</span><br><span class="line">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span><br><span class="line"><span class="number">00000000000</span>e  <span class="number">000e00000004</span> R_X86_64_PLT32    <span class="number">0000000000000000</span> test - <span class="number">4</span></span><br><span class="line"><span class="number">000000000014</span>  <span class="number">000f</span>00000002 R_X86_64_PC32     <span class="number">0000000000000000</span> g_test - <span class="number">4</span></span><br><span class="line">[root@<span class="number">192</span> link]<span class="meta"># readelf -sW main | grep <span class="string">&quot;GLOBAL&quot;</span> | grep -E <span class="string">&quot;main|test&quot;</span></span></span><br><span class="line">    <span class="number">60</span>: <span class="number">0000000000404028</span>     <span class="number">4</span> OBJECT  GLOBAL DEFAULT   <span class="number">21</span> g_test</span><br><span class="line">    <span class="number">63</span>: <span class="number">000000000040111</span>a    <span class="number">34</span> FUNC    GLOBAL DEFAULT   <span class="number">11</span> main</span><br><span class="line">    <span class="number">67</span>: <span class="number">000000000040113</span>c     <span class="number">7</span> FUNC    GLOBAL DEFAULT   <span class="number">11</span> test</span><br></pre></td></tr></table></figure>
<p>重定位后的信息</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重定位前</span></span><br><span class="line"><span class="number">0000000000000000</span> &lt;main&gt;:</span><br><span class="line">   <span class="number">0</span>:   <span class="number">55</span>                      push   %rbp</span><br><span class="line">   <span class="number">1</span>:   <span class="number">48</span> <span class="number">89</span> e5                mov    %rsp,%rbp</span><br><span class="line">   <span class="number">4</span>:   <span class="number">48</span> <span class="number">83</span> ec <span class="number">10</span>             sub    $<span class="number">0x10</span>,%rsp</span><br><span class="line">   <span class="number">8</span>:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">   d:   e8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          callq  <span class="number">12</span> &lt;main+<span class="number">0x12</span>&gt;</span><br><span class="line">                        e: R_X86_64_PLT32       test<span class="number">-0x4</span></span><br><span class="line">  <span class="number">12</span>:   <span class="number">8b</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       mov    <span class="number">0x0</span>(%rip),%eax        # <span class="number">18</span> &lt;main+<span class="number">0x18</span>&gt;</span><br><span class="line">                        <span class="number">14</span>: R_X86_64_PC32       g_test<span class="number">-0x4</span></span><br><span class="line">  <span class="number">18</span>:   <span class="number">89</span> <span class="number">45</span> fc                mov    %eax,<span class="number">-0x4</span>(%rbp)</span><br><span class="line">  <span class="number">1b</span>:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">20</span>:   c9                      leaveq</span><br><span class="line">  <span class="number">21</span>:   c3                      retq</span><br><span class="line"><span class="comment">// 重定位后</span></span><br><span class="line"><span class="number">000000000040111</span>a &lt;main&gt;:</span><br><span class="line">  <span class="number">40111</span>a:       <span class="number">55</span>                      push   %rbp</span><br><span class="line">  <span class="number">40111b</span>:       <span class="number">48</span> <span class="number">89</span> e5                mov    %rsp,%rbp</span><br><span class="line">  <span class="number">40111</span>e:       <span class="number">48</span> <span class="number">83</span> ec <span class="number">10</span>             sub    $<span class="number">0x10</span>,%rsp</span><br><span class="line">  <span class="number">401122</span>:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">401127</span>:       e8 <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          callq  <span class="number">40113</span>c &lt;test&gt;</span><br><span class="line">  <span class="number">40112</span>c:       <span class="number">8b</span> <span class="number">05</span> f6 <span class="number">2</span>e <span class="number">00</span> <span class="number">00</span>       mov    <span class="number">0x2ef6</span>(%rip),%eax        # <span class="number">404028</span> &lt;g_test&gt;</span><br><span class="line">  <span class="number">401132</span>:       <span class="number">89</span> <span class="number">45</span> fc                mov    %eax,<span class="number">-0x4</span>(%rbp)</span><br><span class="line">  <span class="number">401135</span>:       b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">  <span class="number">40113</span>a:       c9                      leaveq</span><br><span class="line">  <span class="number">40113b</span>:       c3                      retq</span><br></pre></td></tr></table></figure>
<h4 id="3-1-重定位PC相对引用">3.1 重定位PC相对引用</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">r.offset = <span class="number">0xe</span></span><br><span class="line">r.symbol = test</span><br><span class="line">r.type   = R_X86_64_PLT32</span><br><span class="line">r.addend = <span class="number">-4</span></span><br><span class="line">ADDR(s) = ADDR(main) = <span class="number">0x40111a</span></span><br><span class="line">ADDR(r.symbol) = ADDR(test) = <span class="number">0x40113c</span></span><br><span class="line">refaddr = ADDR(s) + r.offset = <span class="number">0x40111a</span> + <span class="number">0xe</span> = <span class="number">0x401128</span></span><br><span class="line">*refptr = (<span class="type">unsigned</span>) (ADDR(r.symbol) + r.addend - refaddr)</span><br><span class="line">        = (<span class="type">unsigned</span>) (<span class="number">0x40113c</span>       + (<span class="number">-4</span>)     - <span class="number">0x401128</span>)</span><br><span class="line">        = (<span class="type">unsigned</span>) (<span class="number">0x10</span>)</span><br></pre></td></tr></table></figure>
<p>因此重定位被修改成</p>
<p><code>401127:       e8 10 00 00 00          callq  40113c &lt;test&gt;</code></p>
<h4 id="3-2-重定位绝对引用">3.2 重定位绝对引用</h4>
]]></content>
      <categories>
        <category>link</category>
      </categories>
      <tags>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>malloc引起三个线程卡死问题</title>
    <url>/zhoukaiqi/1393215fa52d/</url>
    <content><![CDATA[<h5 id="1-背景描述">1.背景描述</h5>
<p>最近参与定位了一个malloc死锁导致的三个线程卡死问题。本文对该问题进行了复盘。</p>
<span id="more"></span>
<h5 id="2-原理介绍">2.原理介绍</h5>
<p>为了构造malloc死锁，需要设置malloc公用同一把锁，导入环境变量<code>export MALLOC_ARENA_MAX=1</code></p>
<ol>
<li>线程 C 第二次调用malloc后异常，产生6信号。在信号处理函数中再次调用malloc构造出malloc锁死锁；</li>
<li>线程 B 先拿了g_Mutex锁，再调用malloc。由于线程 C 已经占了malloc锁，导致线程 B 在等malloc锁过程中卡死；</li>
<li>线程 A 想占用g_Mutex锁。由于线程 B 已经拿了g_Mutex锁，导致线程 A 在等g_Mutex锁过程中卡死。</li>
</ol>
<h5 id="3-具体实现">3.具体实现</h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc deadlock.c -lpthread -fno-omit-frame-pointer -m64 -g -o deadlock</span></span><br><span class="line"><span class="comment">// MALLOC_ARENA_MAX=1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> g_Mutex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*SigHandler)</span><span class="params">(<span class="type">int</span> sigNum, <span class="type">siginfo_t</span> *sigInfo, <span class="type">void</span> *context)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SingalHandlerReg</span><span class="params">(<span class="type">int</span> sigNum, SigHandler sigHandler)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">sigset_t</span> sigMask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sig</span>;</span></span><br><span class="line">    (<span class="type">void</span>)sigfillset(&amp;sigMask);</span><br><span class="line">    sig.sa_mask = sigMask;</span><br><span class="line">    sig.sa_flags = SA_SIGINFO;</span><br><span class="line">    sig.sa_sigaction = (<span class="type">void</span> *)sigHandler;</span><br><span class="line">    sigaction(sigNum, &amp;sig, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigHandler</span><span class="params">(<span class="type">int</span> sigNum, <span class="type">siginfo_t</span> *sigInfo, <span class="type">void</span> *context)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// memset(p, 0, 40000);</span></span><br><span class="line">    <span class="comment">// raise(6);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ThreadA</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>)arg;</span><br><span class="line">    prctl(PR_SET_NAME, <span class="string">&quot;ThreadA&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;g_Mutex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ThreadA is running %d\n&quot;</span>, i);</span><br><span class="line">        pthread_mutex_unlock(&amp;g_Mutex);</span><br><span class="line">        i++;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ThreadB</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>)arg;</span><br><span class="line">    prctl(PR_SET_NAME, <span class="string">&quot;ThreadB&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ThreadB is running %d\n&quot;</span>, i);</span><br><span class="line">        pthread_mutex_lock(&amp;g_Mutex);</span><br><span class="line">        <span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">20</span>);</span><br><span class="line">        pthread_mutex_unlock(&amp;g_Mutex);</span><br><span class="line">        i++;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ThreadC</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>)arg;</span><br><span class="line">    prctl(PR_SET_NAME, <span class="string">&quot;ThreadC&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ThreadC is running %d\n&quot;</span>, i);</span><br><span class="line">        <span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">20</span>);</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="string">&#x27;c&#x27;</span>, <span class="number">20000</span>);</span><br><span class="line">        <span class="type">int</span> *q = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">20</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid1;</span><br><span class="line">    <span class="type">pthread_t</span> tid2;</span><br><span class="line">    <span class="type">pthread_t</span> tid3;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    SingalHandlerReg(<span class="number">6</span>, sigHandler);</span><br><span class="line">    ret = pthread_mutex_init(&amp;g_Mutex, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_mutex_init g_MutexA failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_create(&amp;tid1, <span class="literal">NULL</span>, (<span class="type">void</span> *)ThreadA, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_create failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_create(&amp;tid2, <span class="literal">NULL</span>, (<span class="type">void</span> *)ThreadB, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_create failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_create(&amp;tid3, <span class="literal">NULL</span>, (<span class="type">void</span> *)ThreadC, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_create failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-定位信息">4.定位信息</h5>
<p>现象：线程 A 执行两次后卡死，线程 B 执行两次后卡死，线程 C 执行一次后卡死。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[root@<span class="number">192</span> deadlock]# ./deadlock</span><br><span class="line">ThreadA is running <span class="number">1</span></span><br><span class="line">ThreadB is running <span class="number">1</span></span><br><span class="line">ThreadA is running <span class="number">2</span></span><br><span class="line">ThreadC is running <span class="number">1</span></span><br><span class="line">ThreadB is running <span class="number">2</span></span><br><span class="line"><span class="built_in">malloc</span>(): corrupted top size</span><br></pre></td></tr></table></figure>
<p>查看g_Mutex锁的信息，当前占用g_Mutex锁的是线程LWP 6217，即线程 B</p>
<p><font color="#FF0000"><strong>当三个线程都卡死后，线程 C 间接影响了线程 A 的运行，是一个比较经典的死锁问题。</strong></font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) i thread 2 3 4</span><br><span class="line">  Id   Target Id                                  Frame</span><br><span class="line">  2    Thread 0x7f39b4738700 (LWP 6216) &quot;ThreadA&quot; __lll_lock_wait ()</span><br><span class="line">  3    Thread 0x7f39b3f37700 (LWP 6217) &quot;ThreadB&quot; __lll_lock_wait_private ()</span><br><span class="line">  4    Thread 0x7f39b3736700 (LWP 6218) &quot;ThreadC&quot; __lll_lock_wait_private ()</span><br><span class="line">(gdb) p *(unsigned int *)((char *)&amp;g_Mutex + 8)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 = 6217</span></span><br><span class="line">(gdb) thread apply all bt</span><br><span class="line"></span><br><span class="line">Thread 4 (Thread 0x7f39b3736700 (LWP 6218)):</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0  __lll_lock_wait_private ()</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1  0x00007f39b47c1afb <span class="keyword">in</span> __GI___libc_malloc (bytes=80)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2  0x0000000000401312 <span class="keyword">in</span> sigHandler (sigNum=6, sigInfo=0x7f39b37354f0, context=0x7f39b37353c0)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3  &lt;signal handler called&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4  __GI_raise (sig=sig@entry=6)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5  0x00007f39b4776931 <span class="keyword">in</span> __GI_abort ()</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">6  0x00007f39b47b6eb9 <span class="keyword">in</span> __libc_message (action=action@entry=do_abort, <span class="built_in">fmt</span>=<span class="built_in">fmt</span>@entry=0x7f39b48be81d <span class="string">&quot;%s\n&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">7  0x00007f39b47bd62a <span class="keyword">in</span> malloc_printerr (str=str@entry=0x7f39b48bcf04 <span class="string">&quot;malloc(): corrupted top size&quot;</span>)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">8  0x00007f39b47c087a <span class="keyword">in</span> _int_malloc (av=av@entry=0x7f39b48edaa0 &lt;main_arena&gt;, bytes=bytes@entry=80)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">9  0x00007f39b47c1b0d <span class="keyword">in</span> __GI___libc_malloc (bytes=80)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">10 0x0000000000401458 <span class="keyword">in</span> ThreadC (arg=0x0)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">11 0x00007f39b48fcf1b <span class="keyword">in</span> start_thread (arg=0x7f39b3736700)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">12 0x00007f39b4834340 <span class="keyword">in</span> <span class="built_in">clone</span> ()</span></span><br><span class="line"></span><br><span class="line">Thread 3 (Thread 0x7f39b3f37700 (LWP 6217)):</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0  __lll_lock_wait_private ()</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1  0x00007f39b47c1afb <span class="keyword">in</span> __GI___libc_malloc (bytes=80)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2  0x00000000004013c7 <span class="keyword">in</span> ThreadB (arg=0x0)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3  0x00007f39b48fcf1b <span class="keyword">in</span> start_thread (arg=0x7f39b3f37700)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4  0x00007f39b4834340 <span class="keyword">in</span> <span class="built_in">clone</span> ()</span></span><br><span class="line"></span><br><span class="line">Thread 2 (Thread 0x7f39b4738700 (LWP 6216)):</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0  __lll_lock_wait ()</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1  0x00007f39b48ff4a1 <span class="keyword">in</span> __GI___pthread_mutex_lock (mutex=0x4040c0 &lt;g_Mutex&gt;)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2  0x000000000040134a <span class="keyword">in</span> ThreadA (arg=0x0)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3  0x00007f39b48fcf1b <span class="keyword">in</span> start_thread (arg=0x7f39b4738700)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4  0x00007f39b4834340 <span class="keyword">in</span> <span class="built_in">clone</span> ()</span></span><br></pre></td></tr></table></figure>
<h5 id="5-补充知识">5.补充知识</h5>
<p>如何构造malloc异常</p>
<p>malloc申请一块内存，内存被写越界。如果第二次malloc申请的内存有部分已经被前者写越界，则会抛出6信号SIGABRT异常。</p>
]]></content>
      <categories>
        <category>pthread</category>
      </categories>
      <tags>
        <tag>pthread</tag>
      </tags>
  </entry>
  <entry>
    <title>动态链接</title>
    <url>/zhoukaiqi/20785740b336/</url>
    <content><![CDATA[<p>本文介绍动态链接中的重定位。</p>
<span id="more"></span>
<h4 id="1-为什么要使用动态链接">1 为什么要使用动态链接</h4>
<p>静态链接会导致bin文件很大，浪费内存空间。同时静态链接不利于程序的发布和维护。而动态链接通过共享库so解决了以上两点问题。</p>
<h4 id="2-动态链接遇到的拦路虎">2 动态链接遇到的拦路虎</h4>
<p>比如函数A调用了libb.so中的函数B，编译函数A所在的.c文件时是不知道函数B的地址的，所以call B的地址无法确认。如果后续进行符号重定位，就需要对call B的地址进行修改，但是代码段又没有可写的权限，这是一个矛盾点。需要通过增加一个适配层解决。</p>
<p>由于数据段是可写的，代码段call B的地址可以指向数据段，在数据段中填入函数B的实际地址。</p>
<h4 id="3-PLT表和GOT表">3 PLT表和GOT表</h4>
<p>PLT表：过程链接表(Procedure Linkage Table) 存放额外代码段表</p>
<p>GOT表：全局偏移表(Global Offset Table)	存放函数地址的数据表</p>
<p>call B的地址即用到了PLT表，数据段中存的是GOT表。</p>
<h4 id="4-延迟重定位">4 延迟重定位</h4>
<p>只有动态库函数在被调用时，才会进行地址解析和重定位工作，这时候动态库函数的地址才会被写入到GOT表项中</p>
<h5 id="函数第一次被调用过程">函数第一次被调用过程</h5>
<ul>
<li><img src="https://img1.imgtp.com/2022/08/21/Nx0m5CYg.png" alt=""></li>
</ul>
<p>第一步由函数调用跳入到PLT表中，然后第二步PLT表跳到GOT表中，可以看到第三步由GOT表回跳到PLT表中，这时候进行压栈，把代表函数的ID压栈，接着第四步跳转到公共的PLT表项中，第5步进入到GOT表中，然后_dl_runtime_resolve对动态函数进行地址解析和重定位，第七步把动态函数真实的地址写入到GOT表项中，然后执行函数并返回。</p>
<p>解释下dynamic段，link_map和_dl_runtime_resolve</p>
<p>dynamic段：提供动态链接的信息，例如动态链接中各个表的位置</p>
<p>link_map：已加载库的链表，由动态库函数的地址构成的链表</p>
<p>_dl_runtime_resolve：在第一次运行时进行地址解析和重定位工作</p>
<h5 id="函数非首次被调用过程">函数非首次被调用过程</h5>
<ul>
<li><img src="https://img1.imgtp.com/2022/08/21/rcIbVj3x.png" alt=""></li>
</ul>
<p>可以看到，第一步还是由函数调用跳入到PLT表，但是第二步跳入到GOT表中时，由于这个时候该表项已经是动态函数的真实地址了，所以可以直接执行然后返回。</p>
<h4 id="5-动态链接示例">5 动态链接示例</h4>
<p>b.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc -shared -fPIC b.c -g -o libb.so</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">FuncB</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FuncB\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc main.c libb.so -g -o main</span></span><br><span class="line"><span class="comment">// export LD_LIBRARY_PATH=./</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> noinline __attribute__((noinline))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">FuncB</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">noinline <span class="type">void</span> <span class="title function_">FuncA</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FuncB();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FuncA();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当main进程还未运行时，查询到的相关跳转信息。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncA</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function FuncA:</span><br><span class="line">   <span class="number">0x000000000040113a</span> &lt;+<span class="number">0</span>&gt;:     push   %rbp</span><br><span class="line">   <span class="number">0x000000000040113b</span> &lt;+<span class="number">1</span>&gt;:     mov    %rsp,%rbp</span><br><span class="line">   <span class="number">0x000000000040113e</span> &lt;+<span class="number">4</span>&gt;:     mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">   <span class="number">0x0000000000401143</span> &lt;+<span class="number">9</span>&gt;:     callq  <span class="number">0x401030</span> &lt;FuncB@plt&gt;</span><br><span class="line">   <span class="number">0x0000000000401148</span> &lt;+<span class="number">14</span>&gt;:    nop</span><br><span class="line">   <span class="number">0x0000000000401149</span> &lt;+<span class="number">15</span>&gt;:    pop    %rbp</span><br><span class="line">   <span class="number">0x000000000040114a</span> &lt;+<span class="number">16</span>&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disassemble <span class="number">0x401030</span></span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function FuncB@plt:</span><br><span class="line">   <span class="number">0x0000000000401030</span> &lt;+<span class="number">0</span>&gt;:     jmpq   *<span class="number">0x2fe2</span>(%rip)        # <span class="number">0x404018</span> &lt;FuncB@got.plt&gt;</span><br><span class="line">   <span class="number">0x0000000000401036</span> &lt;+<span class="number">6</span>&gt;:     pushq  $<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x000000000040103b</span> &lt;+<span class="number">11</span>&gt;:    jmpq   <span class="number">0x401020</span></span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) x/wx <span class="number">0x404018</span></span><br><span class="line"><span class="number">0x404018</span> &lt;FuncB@got.plt&gt;:       <span class="number">0x00401036</span></span><br><span class="line">(gdb) x/<span class="number">6</span>i <span class="number">0x401020</span></span><br><span class="line">   <span class="number">0x401020</span>:    pushq  <span class="number">0x2fe2</span>(%rip)        # <span class="number">0x404008</span></span><br><span class="line">   <span class="number">0x401026</span>:    jmpq   *<span class="number">0x2fe4</span>(%rip)        # <span class="number">0x404010</span></span><br><span class="line">   <span class="number">0x40102c</span>:    nopl   <span class="number">0x0</span>(%rax)</span><br><span class="line">   <span class="number">0x401030</span> &lt;FuncB@plt&gt;:        jmpq   *<span class="number">0x2fe2</span>(%rip)        # <span class="number">0x404018</span> &lt;FuncB@got.plt&gt;</span><br><span class="line">   <span class="number">0x401036</span> &lt;FuncB@plt+<span class="number">6</span>&gt;:      pushq  $<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x40103b</span> &lt;FuncB@plt+<span class="number">11</span>&gt;:     jmpq   <span class="number">0x401020</span></span><br><span class="line">(gdb) x/wx <span class="number">0x404010</span></span><br><span class="line"><span class="number">0x404010</span>:       <span class="number">0x00000000</span></span><br></pre></td></tr></table></figure>
<p>当main进程首次运行到FuncA时，0x404010赋了_dl_runtime_resolve_xsavec的地址。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">#<span class="number">0</span>  <span class="number">0x00007ffff7fe1ebd</span> in <span class="title function_">elf_machine_runtime_setup</span> <span class="params">(profile=<span class="number">0</span>, lazy=<span class="number">1</span>, l=<span class="number">0x7ffff7ffe150</span>)</span></span><br><span class="line">#1  _<span class="title function_">dl_relocate_object</span> <span class="params">(scope=<span class="number">0x7ffff7ffe4b0</span>, reloc_mode=&lt;optimized out&gt;, consider_profiling=consider_profiling@entry=<span class="number">0</span>)</span></span><br><span class="line">#2  0x00007ffff7fda25a in <span class="title function_">dl_main</span> <span class="params">()</span></span><br><span class="line">#3  0x00007ffff7fedde0 in _<span class="title function_">dl_sysdep_start</span> <span class="params">()</span></span><br><span class="line">#4  0x00007ffff7fd8191 in _<span class="title function_">dl_start_final</span> <span class="params">(arg=<span class="number">0x7fffffffeae0</span>)</span> at rtld.c:413</span><br><span class="line">#5  _<span class="title function_">dl_start</span> <span class="params">(arg=<span class="number">0x7fffffffeae0</span>)</span> at rtld.c:520</span><br><span class="line">#6  0x00007ffff7fd71c8 in _<span class="title function_">start</span> <span class="params">()</span> from /lib64/ld-linux-x86-64.so.2</span><br><span class="line">#7  0x0000000000000001 in ?? <span class="params">()</span></span><br><span class="line">#8  0x00007fffffffed49 in ?? <span class="params">()</span></span><br><span class="line">#9  0x0000000000000000 in ?? <span class="params">()</span></span><br><span class="line"><span class="params">(gdb)</span> x/2wx 0x404010</span><br><span class="line">0x404010:       0xf7feaba0      0<span class="title function_">x00007fff</span></span><br><span class="line"><span class="params">(gdb)</span> x 0x00007ffff7feaba0</span><br><span class="line">0x7ffff7feaba0 &lt;_dl_runtime_resolve_xsavec&gt;:    0xe3894853</span><br></pre></td></tr></table></figure>
<p>通过_dl_runtime_resolve_xsavec的解析，0x404018被赋入FuncB的地址。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">#<span class="number">0</span>  _dl_fixup (l=&lt;optimized out&gt;, reloc_arg=&lt;optimized out&gt;) at ../elf/dl-runtime.c:<span class="number">149</span></span><br><span class="line">#<span class="number">1</span>  <span class="number">0x00007ffff7feac1a</span> in _dl_runtime_resolve_xsavec () at ../sysdeps/x86_64/dl-trampoline.h:<span class="number">126</span></span><br><span class="line">#<span class="number">2</span>  <span class="number">0x0000000000401148</span> in <span class="title function_">FuncA</span> <span class="params">()</span> at main.c:8</span><br><span class="line">#3  0x0000000000401159 in <span class="title function_">main</span> <span class="params">()</span> at main.c:13</span><br><span class="line"><span class="params">(gdb)</span> x/2wx 0x404018</span><br><span class="line">0x404018 &lt;FuncB@got.plt&gt;:       0xf7fcb12a      0<span class="title function_">x00007fff</span></span><br><span class="line"><span class="params">(gdb)</span> x 0x00007ffff7fcb12a</span><br><span class="line">0x7ffff7fcb12a &lt;FuncB&gt;: 0xe5894855</span><br></pre></td></tr></table></figure>
<p>参考案例：<a href="https://www.jianshu.com/p/0ac63c3744dd">https://www.jianshu.com/p/0ac63c3744dd</a></p>
]]></content>
      <categories>
        <category>link</category>
      </categories>
      <tags>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>互斥锁</title>
    <url>/zhoukaiqi/5acdf544dc0c/</url>
    <content><![CDATA[<p>本文介绍了互斥锁的使用。</p>
<span id="more"></span>
<h5 id="1-pthread-mutex-t结构体-x86-64位-40字节">1. pthread_mutex_t结构体(x86_64位:40字节)</h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">pthread_mutex_s</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="type">int</span> __lock;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> __count;</span><br><span class="line">        <span class="type">int</span> __owner;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __x86_64__</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> __nusers;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="comment">/* KIND must stay at this position in the structure to maintain</span></span><br><span class="line"><span class="comment">           binary compatibility with static initializers.  */</span></span><br><span class="line">        <span class="type">int</span> __kind;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __x86_64__</span></span><br><span class="line">        <span class="type">short</span> __spins;</span><br><span class="line">        <span class="type">short</span> __elision;</span><br><span class="line">        <span class="type">__pthread_list_t</span> __list;</span><br><span class="line"><span class="meta"># <span class="keyword">define</span> __PTHREAD_MUTEX_HAVE_PREV      1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125; __data;</span><br><span class="line">    <span class="type">char</span> __size[__SIZEOF_PTHREAD_MUTEX_T];</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> __align;</span><br><span class="line">&#125; <span class="type">pthread_mutex_t</span>;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>字段</th>
<th>详细说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>__lock</td>
<td>表示mutex的状态，0：未占用   1：占用</td>
</tr>
<tr>
<td>__count</td>
<td>表示锁的次数，用于可重入锁。每次获取锁，值加1；释放锁，值减1</td>
</tr>
<tr>
<td><font color="#FF0000"><strong>__owner</strong></font></td>
<td><font color="#FF0000"><strong>线程的持有者，即线程的LWP，可通过info threads查看</strong></font></td>
</tr>
<tr>
<td>__nusers</td>
<td>使用锁的任务个数，一般情况下为1(被占用)或者0（空闲）</td>
</tr>
<tr>
<td>__kind</td>
<td>mutex的属性</td>
</tr>
</tbody>
</table>
<blockquote>
<p>对于死锁问题，通过<code>__owner</code>找到锁的持有者非常关键。</p>
</blockquote>
<h5 id="2-创建互斥锁">2. 创建互斥锁</h5>
<ul>
<li>
<p>静态创建</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>动态创建</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_init</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex, <span class="type">const</span> <span class="type">pthread_mutexattr_t</span> *mutexattr)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="3-注销互斥锁">3. 注销互斥锁</h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_destory</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span><br></pre></td></tr></table></figure>
<h5 id="4-锁的属性">4. 锁的属性</h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PTHREAD_MUTEX_TIMED_NP：</span><br><span class="line">默认值，普通锁。当一个线程加锁以后，其余请求锁的线程形成一个等待队列，并在解锁后按优先级获得锁。</span><br><span class="line"></span><br><span class="line">PTHREAD_MUTEX_RECURSIVE_NP：</span><br><span class="line">可重入锁，允许同一个线程多次P锁和V锁。</span><br><span class="line"></span><br><span class="line">PTHREAD_MUTEX_ERRORCHECK_NP：</span><br><span class="line">检错锁，同一个线程重复请求同一把锁则返回EDEADLK。</span><br><span class="line"></span><br><span class="line">PTHREAD_MUTEX_ADAPTIVE_NP：</span><br><span class="line">自适应锁，自旋锁和普通锁的混合。</span><br></pre></td></tr></table></figure>
<h5 id="5-锁的操作">5. 锁的操作</h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_trylock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span><br></pre></td></tr></table></figure>
<h5 id="6-其他">6. 其他</h5>
<ul>
<li>无论哪种类型的锁，都不可以被两个不同的线程同时持有</li>
<li>普通锁和自适应锁，解锁者可以是同进程内的任何线程</li>
<li>可重入锁，必须由加锁线程解锁</li>
<li>检错锁，必须由加锁线程解锁，否则返回EPERMc</li>
</ul>
<h5 id="7-死锁构造">7. 死锁构造</h5>
<p>测试代码</p>
<p>ThreadA线程拿了A锁等B锁，ThreadB线程拿了B锁等A锁，造成两个线程死锁。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc deadlock.c -lpthread -fno-omit-frame-pointer -m64 -g -o deadlock</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> g_MutexA;</span><br><span class="line"><span class="type">pthread_mutex_t</span> g_MutexB;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ThreadA</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>)arg;</span><br><span class="line">    prctl(PR_SET_NAME, <span class="string">&quot;ThreadA&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ThreadA is running %d\n&quot;</span>, i);</span><br><span class="line">        pthread_mutex_lock(&amp;g_MutexA);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        pthread_mutex_lock(&amp;g_MutexB);</span><br><span class="line">        pthread_mutex_unlock(&amp;g_MutexB);</span><br><span class="line">        pthread_mutex_unlock(&amp;g_MutexA);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ThreadB</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>)arg;</span><br><span class="line">    prctl(PR_SET_NAME, <span class="string">&quot;ThreadB&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ThreadB is running %d\n&quot;</span>, i);</span><br><span class="line">        pthread_mutex_lock(&amp;g_MutexB);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        pthread_mutex_lock(&amp;g_MutexA);</span><br><span class="line">        pthread_mutex_unlock(&amp;g_MutexA);</span><br><span class="line">        pthread_mutex_unlock(&amp;g_MutexB);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tidA;</span><br><span class="line">    <span class="type">pthread_t</span> tidB;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    ret = pthread_mutex_init(&amp;g_MutexA, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_mutex_init g_MutexA failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_mutex_init(&amp;g_MutexB, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_mutex_init g_MutexB failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_create(&amp;tidA, <span class="literal">NULL</span>, (<span class="type">void</span>*)ThreadA, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_create failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_create(&amp;tidB, <span class="literal">NULL</span>, (<span class="type">void</span>*)ThreadB, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_create failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost deadlock]# ./deadlock</span><br><span class="line">ThreadA is running 1</span><br><span class="line">ThreadB is running 1</span><br></pre></td></tr></table></figure>
<p>0x1ffa即8186，表示A锁被ThreadA线程持有；0x1ffb即8187，表示B锁被ThreadB线程持有。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@localhost deadlock]<span class="comment"># ps -ef | grep deadlock</span></span><br><span class="line">root        <span class="number">8184</span>    <span class="number">7979</span>  <span class="number">0</span> <span class="number">17</span>:<span class="number">32</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ./deadlock</span><br><span class="line">========================================================================</span><br><span class="line"><span class="comment"># 查看锁信息</span></span><br><span class="line">gdb attach `pidof deadlock`</span><br><span class="line">handle SIG35 SIG36 SIGUSR2 nostop noprint</span><br><span class="line"><span class="built_in">set</span> height <span class="number">0</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">print</span> pretty on</span><br><span class="line">i thread <span class="number">2</span> <span class="number">3</span></span><br><span class="line">thread apply <span class="number">2</span> <span class="number">3</span> bt</span><br><span class="line">x/3wx &amp;g_MutexA</span><br><span class="line">x/3wx &amp;g_MutexB</span><br><span class="line">det</span><br><span class="line">q</span><br><span class="line">========================================================================</span><br><span class="line">(gdb) i thread <span class="number">2</span> <span class="number">3</span></span><br><span class="line">  Id   Target Id                                  Frame</span><br><span class="line">  <span class="number">2</span>    Thread <span class="number">0x7f2d57e9f700</span> (LWP <span class="number">8186</span>) <span class="string">&quot;ThreadA&quot;</span> __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:<span class="number">103</span></span><br><span class="line">  <span class="number">3</span>    Thread <span class="number">0x7f2d5769e700</span> (LWP <span class="number">8187</span>) <span class="string">&quot;ThreadB&quot;</span> __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:<span class="number">103</span></span><br><span class="line">(gdb) thread apply <span class="number">2</span> <span class="number">3</span> bt</span><br><span class="line">Thread <span class="number">2</span> (Thread <span class="number">0x7f2d57e9f700</span> (LWP <span class="number">8186</span>)):</span><br><span class="line"><span class="comment">#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103</span></span><br><span class="line"><span class="comment">#1  0x00007f2d580664a1 in __GI___pthread_mutex_lock (mutex=0x4040a0 &lt;g_MutexB&gt;) at ../nptl/pthread_mutex_lock.c:80</span></span><br><span class="line"><span class="comment">#2  0x0000000000401203 in ThreadA (arg=0x0) at deadlock.c:19</span></span><br><span class="line"><span class="comment">#3  0x00007f2d58063f1b in start_thread (arg=0x7f2d57e9f700) at pthread_create.c:486</span></span><br><span class="line"><span class="comment">#4  0x00007f2d57f9b340 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:98</span></span><br><span class="line">Thread <span class="number">3</span> (Thread <span class="number">0x7f2d5769e700</span> (LWP <span class="number">8187</span>)):</span><br><span class="line"><span class="comment">#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:103</span></span><br><span class="line"><span class="comment">#1  0x00007f2d580664a1 in __GI___pthread_mutex_lock (mutex=0x4040e0 &lt;g_MutexA&gt;) at ../nptl/pthread_mutex_lock.c:80</span></span><br><span class="line"><span class="comment">#2  0x0000000000401276 in ThreadB (arg=0x0) at deadlock.c:35</span></span><br><span class="line"><span class="comment">#3  0x00007f2d58063f1b in start_thread (arg=0x7f2d5769e700) at pthread_create.c:486</span></span><br><span class="line"><span class="comment">#4  0x00007f2d57f9b340 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:98</span></span><br><span class="line">(gdb) x/3wx &amp;g_MutexA</span><br><span class="line"><span class="number">0x4040e0</span> &lt;g_MutexA&gt;:    <span class="number">0x00000002</span>      <span class="number">0x00000000</span>      <span class="number">0x00001ffa</span></span><br><span class="line">(gdb) x/3wx &amp;g_MutexB</span><br><span class="line"><span class="number">0x4040a0</span> &lt;g_MutexB&gt;:    <span class="number">0x00000002</span>      <span class="number">0x00000000</span>      <span class="number">0x00001ffb</span></span><br><span class="line">(gdb) p *(pthread_mutex_t *)&amp;g_MutexA</span><br><span class="line">$<span class="number">1</span> = &#123;</span><br><span class="line">  __data = &#123;</span><br><span class="line">    __lock = <span class="number">2</span>,</span><br><span class="line">    __count = <span class="number">0</span>,</span><br><span class="line">    __owner = <span class="number">8186</span>,</span><br><span class="line">    __nusers = <span class="number">1</span>,</span><br><span class="line">    __kind = <span class="number">0</span>,</span><br><span class="line">    __spins = <span class="number">0</span>,</span><br><span class="line">    __elision = <span class="number">0</span>,</span><br><span class="line">    __<span class="built_in">list</span> = &#123;</span><br><span class="line">      __prev = <span class="number">0x0</span>,</span><br><span class="line">      __<span class="built_in">next</span> = <span class="number">0x0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  __size = <span class="string">&quot;\002\000\000\000\000\000\000\000\372\037\000\000\001&quot;</span>, <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">26</span> times&gt;,</span><br><span class="line">  __align = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pthread</category>
      </categories>
      <tags>
        <tag>pthread</tag>
      </tags>
  </entry>
  <entry>
    <title>movaps指令引起的复位</title>
    <url>/zhoukaiqi/82d7b7baa849/</url>
    <content><![CDATA[<p>最近定位了一个bolt优化导致进程异常复位的问题。disassemble复位函数发现是运行到movaps指令时挂了。movaps是SSE指令，要求访问的地址是16字节对齐的。由于bolt优化多开了一层8字节的栈，后续的rbp非16字节对齐。当movaps访问非16字节对齐的rbp时，指令异常，进程复位。</p>
<span id="more"></span>
<p>这里忽略bolt优化，只用汇编模拟movaps指令异常。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    __asm__ __volatile__ (<span class="string">&quot;movaps 0x04(%rdx), %xmm0&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function main:</span><br><span class="line">   <span class="number">0x0000000008001129</span> &lt;+<span class="number">0</span>&gt;:     endbr64</span><br><span class="line">   <span class="number">0x000000000800112d</span> &lt;+<span class="number">4</span>&gt;:     push   %rbp</span><br><span class="line">   <span class="number">0x000000000800112e</span> &lt;+<span class="number">5</span>&gt;:     mov    %rsp,%rbp</span><br><span class="line">   <span class="number">0x0000000008001131</span> &lt;+<span class="number">8</span>&gt;:     movl   $<span class="number">0x0</span>,<span class="number">-0x4</span>(%rbp)</span><br><span class="line">=&gt; <span class="number">0x0000000008001138</span> &lt;+<span class="number">15</span>&gt;:    movaps <span class="number">0x4</span>(%rdx),%xmm0</span><br><span class="line">   <span class="number">0x000000000800113c</span> &lt;+<span class="number">19</span>&gt;:    mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">   <span class="number">0x0000000008001141</span> &lt;+<span class="number">24</span>&gt;:    pop    %rbp</span><br><span class="line">   <span class="number">0x0000000008001142</span> &lt;+<span class="number">25</span>&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) i r rdx</span><br><span class="line">rdx            <span class="number">0x7ffffffee168</span>      <span class="number">140737488281960</span></span><br></pre></td></tr></table></figure>
<p>rdx寄存器是0x7ffffffee168， 0x7ffffffee168+0x4=0x7ffffffee16c不是16字节对齐，所以会出现段错误。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">main () at demo.c:<span class="number">4</span></span><br><span class="line"><span class="number">4</span>           __asm__ __volatile__ (<span class="string">&quot;movaps 0x04(%rdx), %xmm0&quot;</span>);</span><br><span class="line">(gdb) disassemble main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function main:</span><br><span class="line">   <span class="number">0x0000000008001129</span> &lt;+<span class="number">0</span>&gt;:     endbr64</span><br><span class="line">   <span class="number">0x000000000800112d</span> &lt;+<span class="number">4</span>&gt;:     push   %rbp</span><br><span class="line">   <span class="number">0x000000000800112e</span> &lt;+<span class="number">5</span>&gt;:     mov    %rsp,%rbp</span><br><span class="line">   <span class="number">0x0000000008001131</span> &lt;+<span class="number">8</span>&gt;:     movl   $<span class="number">0x0</span>,<span class="number">-0x4</span>(%rbp)</span><br><span class="line">=&gt; <span class="number">0x0000000008001138</span> &lt;+<span class="number">15</span>&gt;:    movaps <span class="number">0x4</span>(%rdx),%xmm0</span><br><span class="line">   <span class="number">0x000000000800113c</span> &lt;+<span class="number">19</span>&gt;:    mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">   <span class="number">0x0000000008001141</span> &lt;+<span class="number">24</span>&gt;:    pop    %rbp</span><br><span class="line">   <span class="number">0x0000000008001142</span> &lt;+<span class="number">25</span>&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>
<p>如果给rdx寄存器减去12字节，使得rdx+4是16字节对齐的，则能正常执行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function main:</span><br><span class="line">   <span class="number">0x0000000008001129</span> &lt;+<span class="number">0</span>&gt;:     endbr64</span><br><span class="line">   <span class="number">0x000000000800112d</span> &lt;+<span class="number">4</span>&gt;:     push   %rbp</span><br><span class="line">   <span class="number">0x000000000800112e</span> &lt;+<span class="number">5</span>&gt;:     mov    %rsp,%rbp</span><br><span class="line">   <span class="number">0x0000000008001131</span> &lt;+<span class="number">8</span>&gt;:     movl   $<span class="number">0x0</span>,<span class="number">-0x4</span>(%rbp)</span><br><span class="line">=&gt; <span class="number">0x0000000008001138</span> &lt;+<span class="number">15</span>&gt;:    movaps <span class="number">0x4</span>(%rdx),%xmm0</span><br><span class="line">   <span class="number">0x000000000800113c</span> &lt;+<span class="number">19</span>&gt;:    mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">   <span class="number">0x0000000008001141</span> &lt;+<span class="number">24</span>&gt;:    pop    %rbp</span><br><span class="line">   <span class="number">0x0000000008001142</span> &lt;+<span class="number">25</span>&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) i r $rdx</span><br><span class="line">rdx            <span class="number">0x7ffffffee168</span>      <span class="number">140737488281960</span></span><br><span class="line">(gdb) <span class="built_in">set</span> $rdx = $rdx - <span class="number">12</span></span><br><span class="line">(gdb) i r $rdx</span><br><span class="line">rdx            <span class="number">0x7ffffffee15c</span>      <span class="number">140737488281948</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">[Inferior <span class="number">1</span> (process <span class="number">396</span>) exited normally]</span><br></pre></td></tr></table></figure>
<p>补充：movups	<code>u表示不必16字节对齐，替换成a表示必须16字节对齐。</code></p>
<p>参考：<a href="https://blog.csdn.net/u010659887/article/details/113802005">https://blog.csdn.net/u010659887/article/details/113802005</a></p>
]]></content>
      <categories>
        <category>assembly</category>
      </categories>
      <tags>
        <tag>assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>条件变量</title>
    <url>/zhoukaiqi/f75200d4167d/</url>
    <content><![CDATA[<p>本文介绍了条件变量。</p>
<span id="more"></span>
<h5 id="1-什么是条件变量">1. 什么是条件变量</h5>
<p>条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括以下两个动作：</p>
<ul>
<li>
<p>一个线程等待”条件变量的条件成立“而被阻塞；</p>
</li>
<li>
<p>另一个线程”使条件成立“来唤醒被阻塞的线程。</p>
</li>
</ul>
<p>为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起使用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 48字节</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SIZEOF_PTHREAD_COND_T 48</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="type">int</span> __lock;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> __futex;</span><br><span class="line">        __externsion__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> __total_seq;</span><br><span class="line">        __externsion__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> __wakeup_seq;</span><br><span class="line">        __externsion__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> __woken_seq;</span><br><span class="line">        <span class="type">void</span> *__mutex;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> __nwaiters;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> __broadcast_seq;</span><br><span class="line">    &#125; __data;</span><br><span class="line">    <span class="type">char</span> __size[__SIZEOF_PTHREAD_COND_T];</span><br><span class="line">    __externsion__ <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> __align;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-如何创建条件变量">2. 如何创建条件变量</h5>
<ul>
<li>
<p>静态创建</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>动态创建</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_init</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_condattr_t</span> *cond_attr)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="3-注销条件变量">3. 注销条件变量</h5>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_destory</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span><br></pre></td></tr></table></figure>
<h5 id="4-条件等待与触发">4. 条件等待与触发</h5>
<p>以下API必须和互斥锁配合，mutex互斥锁必须是普通锁或者自适应锁，且在调用pthread_cond_wait前必须由本线程加锁。</p>
<ul>
<li>
<p>等待</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无条件等待</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_mutex_t</span> *mutex)</span></span><br><span class="line"><span class="comment">// 计时等待,在给定的时间前条件没有满足，则返回ETIMEOUT。abstime = 0表示格林尼治时间1970年1月1日0时0分0秒</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_timewait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_mutex_t</span> *mutex, <span class="type">const</span> <span class="keyword">struct</span> timespec *abstime)</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>触发</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 激活一个等待该条件的线程，存在多个等待线程时按入队顺序激活其中一个</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *__cond)</span></span><br><span class="line"><span class="comment">// 激活所有等待线程</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_broadcast</span><span class="params">(<span class="type">pthread_cond_t</span> *__cond)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="5-pthread-cond-wait的实现细节">5. pthread_cond_wait的实现细节</h5>
<ol>
<li>条件不满足时，才会进入pthread_cond_wait</li>
<li>进入pthread_cond_wait先解锁就马上阻塞</li>
<li>pthread_cond_signal唤醒的是阻塞在pthread_cond_wait的进程</li>
</ol>
<p><img src="https://img1.imgtp.com/2022/07/24/2Eujsx0X.png" alt="20190506080943669.png"></p>
<p>以下pthread_cond_wait和pthread_cond_signal的通常用法的伪代码(条件为：value是不是大于0)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lock(&amp;mutex);</span><br><span class="line"><span class="keyword">while</span>(value&lt;=<span class="number">0</span>)<span class="comment">//需要value&gt;0所以 value&lt;=0就条件不满足</span></span><br><span class="line">&#123;</span><br><span class="line">    pthread_cond_wait(&amp;cond,&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line">unlock(&amp;mutex);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lock(&amp;mutex);</span><br><span class="line"><span class="keyword">if</span>(value==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	value++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(value&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	pthread_cond_signal(&amp;cond);</span><br><span class="line">&#125;</span><br><span class="line">unlock(&amp;mutex);</span><br></pre></td></tr></table></figure>
<p><strong>传入前锁mutex</strong></p>
<p>传入前锁mutex是为了保证线程从条件判断到进入pthread_cond_wait前，条件不被改变。</p>
<p>如果没有传入前的锁。就会有这样的情况：线程A判断条件不满足之后，调用pthread_cond_wait之前，A因为休眠，或者因为多线程下，多个线程执行顺序和快慢的因素，令线程B更改了条件，使得条件满足。但此时线程A还没有调用pthread_cond_wait。等到线程A又启动调用pthread_cond_wait后虽然条件满足，但却收不到pthread_cond_signal的唤醒，就一直阻塞下去。</p>
<p><strong>传入后解锁mutex</strong></p>
<p>传入后解锁是为了条件能够被改变</p>
<p>传入后的解锁，是因为调用pthread_cond_signal的那部分，需要先加锁更改条件后才调用pthread_cond_signal。（更改条件与等待条件满足，都是针对条件这一个资源的竞争，所以调用pthread_cond_wait和调用pthread_cond_signal的两个线程需要同一把锁）</p>
<p>如果pthread_cond_wait内不对mutex解锁，那么在调用pthread_cond_wait后，其他线程就不能更改条件，条件就会一直不满足。</p>
<p><strong>返回前再次锁mutex</strong></p>
<ol>
<li>
<p>返回前再次锁mutex是为了保证线程从pthread_cond_wait返回后 到 再次条件判断前不被改变。</p>
</li>
<li>
<p>保证 在pthread_cond_signal之后与解锁mutex之间可能需要的其他语句能够执行</p>
<p>对于1，这里的理由与传入pthread_cond_wait前锁mutex的理由差不多。如果不锁，那么线程A调用pthread_cond_wait后，条件满足，线程A被唤醒，从pthread_cond_wait返回。线程B在此时更改了条件，使得条件不满足。线程A并不知道条件又被更改，还是以为条件满足，就可能出错。</p>
<p>对于2，只要在pthread_cond_signal之后与解锁mutex之间有其他语句需要执行，那么由于mutex在这时已经被这个线程锁，还没有解锁，所以调用pthread_cond_wait的那个线程在pthread_cond_wait返回前的锁mutex的行为就会阻塞，直到pthread_cond_signal后的语句执行完解锁，pthread_cond_wait才会返回。</p>
</li>
</ol>
<p>参考案例：<a href="https://blog.csdn.net/shichao1470/article/details/89856443?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1-89856443-blog-110194067.pc_relevant_vip_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1-89856443-blog-110194067.pc_relevant_vip_default&amp;utm_relevant_index=2">https://blog.csdn.net/shichao1470/article/details/89856443?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1-89856443-blog-110194067.pc_relevant_vip_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1-89856443-blog-110194067.pc_relevant_vip_default&amp;utm_relevant_index=2</a></p>
]]></content>
      <categories>
        <category>pthread</category>
      </categories>
      <tags>
        <tag>pthread</tag>
      </tags>
  </entry>
  <entry>
    <title>栈保护canary机制与__stack_chk_fail</title>
    <url>/zhoukaiqi/b0bd912f2458/</url>
    <content><![CDATA[<h5 id="栈保护canary机制">栈保护canary机制</h5>
<p>canary机制原理：在函数被调用之后，立即在栈帧中插入一个随机数，函数执行完在返回之前，检查这个随机数是否改变来判断是否存在栈溢出。</p>
<span id="more"></span>
<h5 id="构造-stack-chk-fail">构造__stack_chk_fail</h5>
<p>以demo.c为例，编译命令<code>gcc demo.c -fstack-protector -fno-omit-frame-pointer -fPIC -g -o demo</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FuncDemo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0x900C</span>;</span><br><span class="line">    <span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="string">&#x27;c&#x27;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">100</span>); <span class="comment">// 踩栈</span></span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    b = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FuncDemo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整汇编</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncDemo</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> FuncDemo:</span><br><span class="line">   0x0000aaaaaaaaa884 &lt;+0&gt;:     stp     x29, x30, [sp, <span class="comment">#-112]!</span></span><br><span class="line">   0x0000aaaaaaaaa888 &lt;+4&gt;:     mov     x29, sp</span><br><span class="line">   0x0000aaaaaaaaa88c &lt;+8&gt;:     adrp    x0, 0xaaaaaaaba000</span><br><span class="line">   0x0000aaaaaaaaa890 &lt;+12&gt;:    ldr     x0, [x0, <span class="comment">#4064]</span></span><br><span class="line">   0x0000aaaaaaaaa894 &lt;+16&gt;:    ldr     x1, [x0]</span><br><span class="line">   0x0000aaaaaaaaa898 &lt;+20&gt;:    str     x1, [x29, <span class="comment">#104]</span></span><br><span class="line">   0x0000aaaaaaaaa89c &lt;+24&gt;:    mov     x1, <span class="comment">#0x0                        // #0</span></span><br><span class="line">   0x0000aaaaaaaaa8a0 &lt;+28&gt;:    mov     w0, <span class="comment">#0x900c                     // #36876</span></span><br><span class="line">   0x0000aaaaaaaaa8a4 &lt;+32&gt;:    str     w0, [x29, <span class="comment">#28]</span></span><br><span class="line">   0x0000aaaaaaaaa8a8 &lt;+36&gt;:    mov     x0, <span class="comment">#0x8                        // #8</span></span><br><span class="line">   0x0000aaaaaaaaa8ac &lt;+40&gt;:    bl      0xaaaaaaaaa710 &lt;malloc@plt&gt;</span><br><span class="line">   0x0000aaaaaaaaa8b0 &lt;+44&gt;:    str     x0, [x29, <span class="comment">#32]</span></span><br><span class="line">   0x0000aaaaaaaaa8b4 &lt;+48&gt;:    adrp    x0, 0xaaaaaaaaa000</span><br><span class="line">   0x0000aaaaaaaaa8b8 &lt;+52&gt;:    add     x1, x0, <span class="comment">#0x9f0</span></span><br><span class="line">   0x0000aaaaaaaaa8bc &lt;+56&gt;:    add     x0, x29, <span class="comment">#0x50</span></span><br><span class="line">   0x0000aaaaaaaaa8c0 &lt;+60&gt;:    ldr     x2, [x1]</span><br><span class="line">   0x0000aaaaaaaaa8c4 &lt;+64&gt;:    str     x2, [x0]</span><br><span class="line">   0x0000aaaaaaaaa8c8 &lt;+68&gt;:    ldur    x1, [x1, <span class="comment">#5]</span></span><br><span class="line">   0x0000aaaaaaaaa8cc &lt;+72&gt;:    stur    x1, [x0, <span class="comment">#5]</span></span><br><span class="line">   0x0000aaaaaaaaa8d0 &lt;+76&gt;:    stur    wzr, [x29, <span class="comment">#93]</span></span><br><span class="line">   0x0000aaaaaaaaa8d4 &lt;+80&gt;:    sturh   wzr, [x29, <span class="comment">#97]</span></span><br><span class="line">   0x0000aaaaaaaaa8d8 &lt;+84&gt;:    strb    wzr, [x29, <span class="comment">#99]</span></span><br><span class="line">   0x0000aaaaaaaaa8dc &lt;+88&gt;:    stp     xzr, xzr, [x29, <span class="comment">#40]</span></span><br><span class="line">   0x0000aaaaaaaaa8e0 &lt;+92&gt;:    stp     xzr, xzr, [x29, <span class="comment">#56]</span></span><br><span class="line">   0x0000aaaaaaaaa8e4 &lt;+96&gt;:    str     xzr, [x29, <span class="comment">#72]</span></span><br><span class="line">   0x0000aaaaaaaaa8e8 &lt;+100&gt;:   mov     w0, <span class="comment">#0x1                        // #1</span></span><br><span class="line">   0x0000aaaaaaaaa8ec &lt;+104&gt;:   str     w0, [x29, <span class="comment">#40]</span></span><br><span class="line">   0x0000aaaaaaaaa8f0 &lt;+108&gt;:   add     x0, x29, <span class="comment">#0x28</span></span><br><span class="line">   0x0000aaaaaaaaa8f4 &lt;+112&gt;:   mov     x2, <span class="comment">#0x64                       // #100</span></span><br><span class="line">   0x0000aaaaaaaaa8f8 &lt;+116&gt;:   mov     w1, <span class="comment">#0x63                       // #99</span></span><br><span class="line">   0x0000aaaaaaaaa8fc &lt;+120&gt;:   bl      0xaaaaaaaaa730 &lt;memset@plt&gt;</span><br><span class="line">   0x0000aaaaaaaaa900 &lt;+124&gt;:   ldr     x0, [x29, <span class="comment">#32]</span></span><br><span class="line">   0x0000aaaaaaaaa904 &lt;+128&gt;:   bl      0xaaaaaaaaa770 &lt;free@plt&gt;</span><br><span class="line">   0x0000aaaaaaaaa908 &lt;+132&gt;:   str     xzr, [x29, <span class="comment">#32]</span></span><br><span class="line">   0x0000aaaaaaaaa90c &lt;+136&gt;:   mov     w0, <span class="comment">#0x0                        // #0</span></span><br><span class="line">   0x0000aaaaaaaaa910 &lt;+140&gt;:   adrp    x1, 0xaaaaaaaba000</span><br><span class="line">   0x0000aaaaaaaaa914 &lt;+144&gt;:   ldr     x1, [x1, <span class="comment">#4064]</span></span><br><span class="line">   0x0000aaaaaaaaa918 &lt;+148&gt;:   ldr     x2, [x29, <span class="comment">#104]</span></span><br><span class="line">   0x0000aaaaaaaaa91c &lt;+152&gt;:   ldr     x1, [x1]</span><br><span class="line">   0x0000aaaaaaaaa920 &lt;+156&gt;:   eor     x1, x2, x1</span><br><span class="line">   0x0000aaaaaaaaa924 &lt;+160&gt;:   cmp     x1, <span class="comment">#0x0</span></span><br><span class="line">   0x0000aaaaaaaaa928 &lt;+164&gt;:   b.eq    0xaaaaaaaaa930 &lt;FuncDemo+172&gt;  // b.none</span><br><span class="line">   0x0000aaaaaaaaa92c &lt;+168&gt;:   bl      0xaaaaaaaaa740 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">   0x0000aaaaaaaaa930 &lt;+172&gt;:   ldp     x29, x30, [sp], <span class="comment">#112</span></span><br><span class="line">   0x0000aaaaaaaaa934 &lt;+176&gt;:   ret</span><br></pre></td></tr></table></figure>
<h6 id="1-先通过反汇编找到canary在栈上的存放地址">1. 先通过反汇编找到canary在栈上的存放地址</h6>
<p>canary的值是<code>0x4c597894f2014f00</code>，存入sp + 104的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncDemo</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> FuncDemo:</span><br><span class="line">   0x0000aaaaaaaaa884 &lt;+0&gt;:     stp     x29, x30, [sp, <span class="comment">#-112]!</span></span><br><span class="line">   0x0000aaaaaaaaa888 &lt;+4&gt;:     mov     x29, sp</span><br><span class="line">   0x0000aaaaaaaaa88c &lt;+8&gt;:     adrp    x0, 0xaaaaaaaba000</span><br><span class="line">   0x0000aaaaaaaaa890 &lt;+12&gt;:    ldr     x0, [x0, <span class="comment">#4064]</span></span><br><span class="line">   0x0000aaaaaaaaa894 &lt;+16&gt;:    ldr     x1, [x0]</span><br><span class="line">   0x0000aaaaaaaaa898 &lt;+20&gt;:    str     x1, [x29, <span class="comment">#104]</span></span><br><span class="line">(gdb) i r x0 x1</span><br><span class="line">x0             0xfffff7ffd7a8   281474842482600</span><br><span class="line">x1             0x4c597894f2014f00       5501561000920436480</span><br><span class="line">(gdb) x/2wx <span class="variable">$x0</span></span><br><span class="line">0xfffff7ffd7a8 &lt;__stack_chk_guard&gt;:     0xf2014f00      0x4c597894</span><br><span class="line">(gdb) x/2wx <span class="variable">$sp</span> + 104</span><br><span class="line">0xfffffffffa38: 0xf2014f00      0x4c597894</span><br></pre></td></tr></table></figure>
<h6 id="2-执行完代码第7行">2. 执行完代码第7行</h6>
<p>memset越界，将栈中保存的canary值踩成了’c’</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   0x0000aaaaaaaaa8fc &lt;+120&gt;:   bl      0xaaaaaaaaa730 &lt;memset@plt&gt;</span><br><span class="line">=&gt; 0x0000aaaaaaaaa900 &lt;+124&gt;:   ldr     x0, [x29, <span class="comment">#32]</span></span><br><span class="line">(gdb) x/2wx <span class="variable">$sp</span> + 104</span><br><span class="line">0xfffffffffa38: 0x63636363      0x63636363</span><br></pre></td></tr></table></figure>
<h6 id="3-继续执行">3. 继续执行</h6>
<p>从栈中取出保存的canary值与原来的canary值比较，不相等则说明有踩栈，跳转到__stack_chk_fail并抛出异常信号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   0x0000aaaaaaaaa910 &lt;+140&gt;:   adrp    x1, 0xaaaaaaaba000</span><br><span class="line">   0x0000aaaaaaaaa914 &lt;+144&gt;:   ldr     x1, [x1, <span class="comment">#4064]</span></span><br><span class="line">   0x0000aaaaaaaaa918 &lt;+148&gt;:   ldr     x2, [x29, <span class="comment">#104]</span></span><br><span class="line">   0x0000aaaaaaaaa91c &lt;+152&gt;:   ldr     x1, [x1]</span><br><span class="line">   0x0000aaaaaaaaa920 &lt;+156&gt;:   eor     x1, x2, x1</span><br><span class="line">   0x0000aaaaaaaaa924 &lt;+160&gt;:   cmp     x1, <span class="comment">#0x0</span></span><br><span class="line">   0x0000aaaaaaaaa928 &lt;+164&gt;:   b.eq    0xaaaaaaaaa930 &lt;FuncDemo+172&gt;  // b.none</span><br><span class="line">   0x0000aaaaaaaaa92c &lt;+168&gt;:   bl      0xaaaaaaaaa740 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Program received signal SIGABRT, Aborted.</span><br><span class="line">__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51</span><br><span class="line">51      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51</span></span><br><span class="line"><span class="comment">#1  0x0000fffff7eaa974 in __GI_abort () at abort.c:79</span></span><br><span class="line"><span class="comment">#2  0x0000fffff7ee372c in __libc_message (action=do_abort,</span></span><br><span class="line">    <span class="built_in">fmt</span>=<span class="built_in">fmt</span>@entry=0xfffff7fa3350 <span class="string">&quot;*** %s ***: %s terminated\n&quot;</span>)</span><br><span class="line">    at ../sysdeps/posix/libc_fatal.c:181</span><br><span class="line"><span class="comment">#3  0x0000fffff7f583c4 in __GI___fortify_fail_abort (</span></span><br><span class="line">    need_backtrace=need_backtrace@entry=<span class="literal">false</span>,</span><br><span class="line">    msg=msg@entry=0xfffff7fa3328 <span class="string">&quot;stack smashing detected&quot;</span>)</span><br><span class="line">    at fortify_fail.c:33</span><br><span class="line"><span class="comment">#4  0x0000fffff7f58378 in __stack_chk_fail () at stack_chk_fail.c:29</span></span><br><span class="line"><span class="comment">#5  0x0000aaaaaaaaa930 in FuncDemo () at demo.c:15</span></span><br><span class="line"><span class="comment">#6  0x0000aaaaaaaaa944 in main () at demo.c:19</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>assembly</category>
      </categories>
      <tags>
        <tag>assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>线程爆栈引起的复位</title>
    <url>/zhoukaiqi/761b5f08fe29/</url>
    <content><![CDATA[<p>近期遇到了多次线程爆栈问题，即线程栈的设置太小，被调用函数开栈到了另一个段空间，另一个段不可读写引起了异常。</p>
<span id="more"></span>
<p>下面构造了一个线程爆栈。线程的栈大小是16k，线程内的函数定义了多个局部大数组，会超过16k。</p>
<blockquote>
<p>pthread_attr_setstacksize传入的线程栈大小要大于等于PTHREAD_STACK_MIN，glibc在x86和arm上定义的PTHREAD_STACK_MIN不一样，x86是16k，arm是128k。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 16384</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">FuncB</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">2000</span>] = &#123;<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">FuncA</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">2000</span>] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    FuncB();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ThreadWork</span><span class="params">(<span class="type">void</span> *arg)</span> </span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>)arg;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        FuncA();</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    ret = pthread_attr_init(&amp;attr);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_attr_init failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_attr_setstacksize(&amp;attr, STACK_SIZE);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_attr_setstacksize failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_create(&amp;tid, &amp;attr, (<span class="type">void</span> *)ThreadWork, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call pthread_create failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译：<code>gcc pthread.c -lpthread -g -mmanual-endbr -o pthread</code></p>
<p>异常复位的指令是<code>orq    $0x0,(%rsp)</code>，查询rbp、rsp的值分别是0x7fffff571f70和0x7fffff570f70</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Thread <span class="number">2</span> <span class="string">&quot;pthread&quot;</span> received signal SIGSEGV, Segmentation fault.</span><br><span class="line">[Switching to Thread <span class="number">0x7fffff574700</span> (LWP <span class="number">221</span>)]</span><br><span class="line"><span class="number">0x00000000080011f4</span> in <span class="title function_">FuncB</span> <span class="params">()</span> at pthread.c:9</span><br><span class="line">9       &#123;</span><br><span class="line">(gdb) bt</span><br><span class="line">#<span class="number">0</span>  <span class="number">0x00000000080011f4</span> in <span class="title function_">FuncB</span> <span class="params">()</span> at pthread.c:9</span><br><span class="line">#1  0x0000000008001298 in <span class="title function_">FuncA</span> <span class="params">()</span> at pthread.c:17</span><br><span class="line">#2  0x00000000080012c5 in <span class="title function_">ThreadWork</span> <span class="params">(arg=<span class="number">0x0</span>)</span> at pthread.c:25</span><br><span class="line">#3  0x00007fffff795609 in <span class="title function_">start_thread</span> <span class="params">(arg=&lt;optimized out&gt;)</span> at pthread_create.c:477</span><br><span class="line">#4  0x00007fffff6af133 in <span class="title function_">clone</span> <span class="params">()</span> at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95</span><br><span class="line"><span class="params">(gdb)</span> x/10i FuncB</span><br><span class="line">   0x80011e9 &lt;FuncB&gt;:   push   %rbp</span><br><span class="line">   0x80011ea &lt;FuncB+1&gt;: mov    %rsp,%rbp</span><br><span class="line">   0x80011ed &lt;FuncB+4&gt;: sub    $0x1000,%rsp</span><br><span class="line">=&gt; <span class="number">0x80011f4</span> &lt;FuncB+<span class="number">11</span>&gt;:        orq    $<span class="number">0x0</span>,(%rsp)</span><br><span class="line">   <span class="number">0x80011f9</span> &lt;FuncB+<span class="number">16</span>&gt;:        sub    $<span class="number">0xf50</span>,%rsp</span><br><span class="line">   <span class="number">0x8001200</span> &lt;FuncB+<span class="number">23</span>&gt;:        mov    %fs:<span class="number">0x28</span>,%rax</span><br><span class="line">   <span class="number">0x8001209</span> &lt;FuncB+<span class="number">32</span>&gt;:        mov    %rax,<span class="number">-0x8</span>(%rbp)</span><br><span class="line">   <span class="number">0x800120d</span> &lt;FuncB+<span class="number">36</span>&gt;:        xor    %eax,%eax</span><br><span class="line">   <span class="number">0x800120f</span> &lt;FuncB+<span class="number">38</span>&gt;:        lea    <span class="number">-0x1f50</span>(%rbp),%rdx</span><br><span class="line">   <span class="number">0x8001216</span> &lt;FuncB+<span class="number">45</span>&gt;:        mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">(gdb) i r rbp rsp</span><br><span class="line">rbp            <span class="number">0x7fffff571f70</span>      <span class="number">0x7fffff571f70</span></span><br><span class="line">rsp            <span class="number">0x7fffff570f70</span>      <span class="number">0x7fffff570f70</span></span><br></pre></td></tr></table></figure>
<p>查看maps表，rbp所在的段可读可写，但rsp(即rbp-0x1000)所在的段不可读写，所以会异常。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) shell cat /proc/<span class="number">217</span>/maps | grep <span class="number">7f</span>ffff57</span><br><span class="line"><span class="number">7f</span>ffff570000<span class="number">-7f</span>ffff571000 ---p <span class="number">00000000</span> <span class="number">00</span>:<span class="number">00</span> <span class="number">0</span></span><br><span class="line"><span class="number">7f</span>ffff571000<span class="number">-7f</span>ffff575000 rw-p <span class="number">00000000</span> <span class="number">00</span>:<span class="number">00</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pthread</category>
      </categories>
      <tags>
        <tag>pthread</tag>
      </tags>
  </entry>
  <entry>
    <title>线程调度策略和调度优先级</title>
    <url>/zhoukaiqi/555d8fcae18d/</url>
    <content><![CDATA[<p>本文介绍了线程的调度策略和调度优先级。</p>
<span id="more"></span>
<h5 id="1-概括介绍">1 概括介绍</h5>
<p>linux的调度机制由调度策略(policy)和调度优先级(priority)两个属性共同决定。调度策略分为实时调度策略和非实时调度策略。实时调度策略的优先级取值范围是<code>1~99</code>，并且数值越大，优先级越高。非实时调度策略的优先级固定是0。实时调度策略的优先级总是大于非实时调度策略。而优先级高的线程总是会被优先调度。</p>
<p>实时调度策略：SCHED_FIFO(抢占)，SCHED_RR(轮询)</p>
<p>非实时调度策略：SCHED_OTHER(默认调度策略)</p>
<h5 id="2-调度策略详细介绍">2 调度策略详细介绍</h5>
<h6 id="SCHED-RR：Round-robin-scheduling">SCHED_RR：Round-robin scheduling</h6>
<p>当线程的优先级不同时，高优先级的线程先调度。当优先级相同时，按照固定的时间片循环调度。被调用的线程满足以下条件会让出CPU：</p>
<ul>
<li>调度的时间片用完，线程被放在同一优先级队列的队尾；</li>
<li>自动放弃CPU，如调用阻塞接口(eg:sleep, select)或者调用sched_yield，线程被放在同一优先级队列的队尾；</li>
<li>被更高优先级的线程抢占，线程被放在同一优先级队列的队首；</li>
<li>线程退出</li>
</ul>
<h6 id="SCHED-FIFO：First-in-first-out-scheduling">SCHED_FIFO：First in-first out scheduling</h6>
<p>与SCHED_RR的调度策略相似，没有时间片概念，线程一旦运行会一直占用CPU。让出CPU的条件也与SCHED_RR类似，但没有时间片用完此情况。</p>
<h6 id="SCHED-OTHER：time-sharing-scheduling">SCHED_OTHER：time-sharing scheduling</h6>
<p>分时循环调度策略。也就是我们常说的CFS(Completely Fair Scheduler)完全公平调度器。是系统的默认调度策略。按动态时间片循环调度。动态时间片由nice属性值决定。每个SCHED_OTHER策略的线程都拥有一个nice值，其取值范围为−20～19，默认值为0。nice值是一个权重因子，值越小，权重越大。CPU为其分配的动态时间片会越多。</p>
<h5 id="3-相关函数">3 相关函数</h5>
<p>pthread_attr_setinheritsched   设置线程是否继承父线程的调度策略</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setinheritsched</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> inheritsched)</span></span><br><span class="line">inheritsched：是否继承父线程的调度策略</span><br><span class="line">PTHREAD_EXPLICIT_SCHED：不继承，只有不继承父线程的调度策略才可以设置线程的调度策略</span><br><span class="line">PTHREAD_INHERIT_SCHED：继承父线程的调度策略，默认值</span><br></pre></td></tr></table></figure>
<p>pthread_attr_setschedpolicy    设置线程的调度策略</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setschedpolicy</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> policy)</span></span><br><span class="line">policy: 调度策略</span><br><span class="line">SCHED_OTHER</span><br><span class="line">SCHED_FIFO</span><br><span class="line">SCHED_RR</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCHED_OTHER   0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCHED_FIFO    1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCHED_RR      2</span></span><br></pre></td></tr></table></figure>
<p>pthread_attr_setschedparam     设置线程的优先级</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setschedparam</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">const</span> <span class="keyword">struct</span> sched_param *param)</span></span><br><span class="line"><span class="keyword">struct</span> sched_param &#123;</span><br><span class="line">    <span class="type">int</span> sched_priority;</span><br><span class="line">&#125;</span><br><span class="line">备注：只能设置还没有创建的线程</span><br></pre></td></tr></table></figure>
<p>pthread_setschedparam          设置线程的优先级</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_setschedparam</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">int</span> policy, <span class="type">const</span> <span class="keyword">struct</span> sched_param *param)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_getschedparam</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">int</span> *policy, <span class="keyword">struct</span> sched_param *param)</span></span><br><span class="line">备注：只能设置已经存在的线程</span><br></pre></td></tr></table></figure>
<h5 id="4-编程实例">4 编程实例</h5>
<p>使用pthread_attr_setinheritsched，pthread_attr_setschedpolicy，pthread_attr_setschedparam</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc test1.c -lpthread -g -o test1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ThreadTest</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>)arg;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">int</span> policy;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">param</span>;</span></span><br><span class="line">    prctl(PR_SET_NAME, <span class="string">&quot;ThreadTest&quot;</span>);</span><br><span class="line">    <span class="type">pthread_t</span> tid = pthread_self();</span><br><span class="line">    ret = pthread_getschedparam(tid, &amp;policy, &amp;param);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span> &amp;&amp; policy == SCHED_RR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ThreadTest(0x%lx) policy is SCHED_RR, priority is %d\n&quot;</span>, tid, param.sched_priority);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">param</span>;</span></span><br><span class="line">    ret = pthread_attr_init(&amp;attr);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_attr_init failed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_attr_setinheritsched(&amp;attr, PTHREAD_EXPLICIT_SCHED);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_attr_setinheritsched failed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_attr_setschedpolicy(&amp;attr, SCHED_RR);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_attr_setschedpolicy failed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    param.sched_priority = <span class="number">40</span>;</span><br><span class="line">    ret = pthread_attr_setschedparam(&amp;attr, &amp;param);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_attr_setschedparam failed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_create(&amp;tid, &amp;attr, (<span class="type">void</span> *)ThreadTest, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_create failed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">./test1</span><br><span class="line"><span class="title function_">ThreadTest</span><span class="params">(<span class="number">0x7f91d744e700</span>)</span> policy is SCHED_RR, priority is 40</span><br></pre></td></tr></table></figure>
<p>使用pthread_setschedparam</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc test2.c -lpthread -g -o test2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ThreadTest</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>)arg;</span><br><span class="line">    <span class="type">int</span> policy;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">param</span>;</span></span><br><span class="line">    prctl(PR_SET_NAME, <span class="string">&quot;ThreadTest&quot;</span>);</span><br><span class="line">    <span class="type">pthread_t</span> tid = pthread_self();</span><br><span class="line">    (<span class="type">void</span>)pthread_getschedparam(tid, &amp;policy, &amp;param);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before set schedparam, ThreadTest(0x%lx) policy is %d, priority is %d\n&quot;</span>, tid, policy, param.sched_priority);</span><br><span class="line">    param.sched_priority = <span class="number">40</span>;</span><br><span class="line">    (<span class="type">void</span>)pthread_setschedparam(tid, SCHED_FIFO, &amp;param);</span><br><span class="line">    (<span class="type">void</span>)pthread_getschedparam(tid, &amp;policy, &amp;param);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; After set schedparam, ThreadTest(0x%lx) policy is %d, priority is %d\n&quot;</span>, tid, policy, param.sched_priority);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, (<span class="type">void</span> *)ThreadTest, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_create failed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">./test2</span><br><span class="line">Before <span class="built_in">set</span> schedparam, ThreadTest(<span class="number">0x7feb0453e700</span>) policy is <span class="number">0</span>, priority is <span class="number">0</span></span><br><span class="line"> After <span class="built_in">set</span> schedparam, ThreadTest(<span class="number">0x7feb0453e700</span>) policy is <span class="number">1</span>, priority is <span class="number">40</span></span><br></pre></td></tr></table></figure>
<h5 id="5-相关命令">5 相关命令</h5>
<ul>
<li>查询调度策略：chrt -p pid</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chrt -p 7</span><br><span class="line">pid 7&#x27;s current scheduling policy: SCHED_OTHER</span><br><span class="line">pid 7&#x27;s current scheduling priority: 0</span><br></pre></td></tr></table></figure>
<ul>
<li>查询绑核信息：taskset -cp pid</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">taskset -cp 7</span><br><span class="line">pid 7&#x27;s current affinity list: 0-7</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pthread</category>
      </categories>
      <tags>
        <tag>pthread</tag>
      </tags>
  </entry>
  <entry>
    <title>x86_64推栈原理与实现1</title>
    <url>/zhoukaiqi/e578d0eceb35/</url>
    <content><![CDATA[<p>本文介绍了x86_64推栈原理和具体代码实现。</p>
<span id="more"></span>
<h4 id="推栈原理">推栈原理</h4>
<p>x86_64的rbp推栈需要添加编译选项<code>-fno-omit-frame-pointer</code>，否则rbp不作为栈帧寄存器使用，无法正确推栈。</p>
<p><img src="https://s1.daohangmao.net/2022/06/26/62b7cdf3eb89f.png" alt=""></p>
<p>开栈（从高地址到低地址）：当函数A callq 函数B时，会先将函数A的下一条指令存入rsp(即后续返回到A函数的地址)。而调用到函数B后，会将函数A的寄存器rbp存入rsp并且将rsp赋值给rbp。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// callq addr的具体实现</span><br><span class="line">rsp = rsp - 8</span><br><span class="line">*(unsigned long*)rsp = rip + sizeof(inst)</span><br><span class="line">rip = addr</span><br><span class="line"></span><br><span class="line">// push rbp的具体实现</span><br><span class="line">rsp = rsp - 8</span><br><span class="line">*(unsigned long*)rsp = rbp</span><br><span class="line"></span><br><span class="line">// 函数的入口指令</span><br><span class="line">(gdb) disassemble FuncC</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> FuncC:</span><br><span class="line">   0x000055555555471a &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x000055555555471b &lt;+1&gt;:     mov    %rsp,%rbp</span><br></pre></td></tr></table></figure>
<p>推栈（从低地址到高地址）：根据上述的压栈规则，可以得到推栈公式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">preRbp = *(<span class="type">unsigned</span> <span class="type">long</span>*)rbp;</span><br><span class="line">funcAddr = *(<span class="type">unsigned</span> <span class="type">long</span>*)(rbp + <span class="number">8</span>);</span><br></pre></td></tr></table></figure>
<h4 id="代码实现推栈">代码实现推栈</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> GetRbp() (&#123; \</span></span><br><span class="line"><span class="meta">    unsigned long rbp; \</span></span><br><span class="line"><span class="meta">    __asm__ __volatile__ (<span class="string">&quot;movq %%rbp,%0&quot;</span>:<span class="string">&quot;=r&quot;</span>(rbp)); \</span></span><br><span class="line"><span class="meta">    rbp; \</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetCurrentStackBase</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> *stackBegin, <span class="type">unsigned</span> <span class="type">long</span> *stackBase)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid = pthread_self();</span><br><span class="line">    <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    ret = pthread_getattr_np(tid, &amp;attr);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">void</span> *pStackAddr = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">size_t</span> stackSize = <span class="number">0</span>;</span><br><span class="line">        (<span class="type">void</span>)pthread_attr_getstack(&amp;attr, &amp;pStackAddr, (<span class="type">size_t</span> *)(&amp;stackSize));</span><br><span class="line">        (<span class="type">void</span>)pthread_attr_destroy(&amp;attr);</span><br><span class="line">        *stackBegin = (<span class="type">unsigned</span> <span class="type">long</span>)pStackAddr;</span><br><span class="line">        *stackBase = (<span class="type">unsigned</span> <span class="type">long</span>)pStackAddr + stackSize;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *stackBegin = <span class="number">0</span>;</span><br><span class="line">    *stackBase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsInvalidAddr</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> instAddr, <span class="type">unsigned</span> <span class="type">long</span> begin, <span class="type">unsigned</span> <span class="type">long</span> end)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> instAddr &lt;= begin &amp;&amp; instAddr &gt;= end &amp;&amp; (instAddr &amp; <span class="number">3</span>) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">BackTrace</span><span class="params">(<span class="type">void</span> **buffer, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *<span class="built_in">array</span> = *(<span class="type">unsigned</span> <span class="type">long</span> **)buffer;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ulRbp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stackBegin;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stackBase;</span><br><span class="line">    ulRbp = GetRbp();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = <span class="number">0xfaceface</span>; <span class="comment">// 赋予无效值</span></span><br><span class="line">    &#125;</span><br><span class="line">    GetCurrentStackBase(&amp;stackBegin, &amp;stackBase);</span><br><span class="line">    <span class="keyword">if</span> (IsInvalidAddr(ulRbp, stackBegin, stackBase)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> stackDepth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> preUlRbp = ulRbp;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> instAddr = ulRbp + <span class="number">8</span>;</span><br><span class="line">        ulRbp = *(<span class="type">unsigned</span> <span class="type">long</span> *)ulRbp;</span><br><span class="line">        <span class="keyword">if</span> (IsInvalidAddr(instAddr, stackBegin, stackBase) </span><br><span class="line">            || IsInvalidAddr(ulRbp, preUlRbp, stackBase)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">array</span>[stackDepth] = *(<span class="type">unsigned</span> <span class="type">long</span> *)instAddr;</span><br><span class="line">        stackDepth++;</span><br><span class="line">    &#125; <span class="keyword">while</span>(stackDepth &lt; size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试demo</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc backtrace.c -lpthread -rdynamic -m64 -fno-omit-frame-pointer -g -D_GNU_SOURCE -o backtrace</span></span><br><span class="line"><span class="comment">// backtrace_symbols only works if link with -rdynamic</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;execinfo.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> noinline __attribute__((noinline))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GetRbp() (&#123; \</span></span><br><span class="line"><span class="meta">    unsigned long rbp; \</span></span><br><span class="line"><span class="meta">    __asm__ __volatile__ (<span class="string">&quot;movq %%rbp,%0&quot;</span>:<span class="string">&quot;=r&quot;</span>(rbp)); \</span></span><br><span class="line"><span class="meta">    rbp; \</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetCurrentStackBase</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> *stackBegin, <span class="type">unsigned</span> <span class="type">long</span> *stackBase)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid = pthread_self();</span><br><span class="line">    <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    ret = pthread_getattr_np(tid, &amp;attr);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">void</span> *pStackAddr = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">size_t</span> stackSize = <span class="number">0</span>;</span><br><span class="line">        (<span class="type">void</span>)pthread_attr_getstack(&amp;attr, &amp;pStackAddr, (<span class="type">size_t</span> *)(&amp;stackSize));</span><br><span class="line">        (<span class="type">void</span>)pthread_attr_destroy(&amp;attr);</span><br><span class="line">        *stackBegin = (<span class="type">unsigned</span> <span class="type">long</span>)pStackAddr;</span><br><span class="line">        *stackBase = (<span class="type">unsigned</span> <span class="type">long</span>)pStackAddr + stackSize;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *stackBegin = <span class="number">0</span>;</span><br><span class="line">    *stackBase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsInvalidAddr</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> instAddr, <span class="type">unsigned</span> <span class="type">long</span> begin, <span class="type">unsigned</span> <span class="type">long</span> end)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> instAddr &lt;= begin &amp;&amp; instAddr &gt;= end &amp;&amp; (instAddr &amp; <span class="number">3</span>) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">BackTrace</span><span class="params">(<span class="type">void</span> **buffer, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *<span class="built_in">array</span> = *(<span class="type">unsigned</span> <span class="type">long</span> **)buffer;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ulRbp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stackBegin;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stackBase;</span><br><span class="line">    ulRbp = GetRbp();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = <span class="number">0xfaceface</span>; <span class="comment">// 赋予无效值</span></span><br><span class="line">    &#125;</span><br><span class="line">    GetCurrentStackBase(&amp;stackBegin, &amp;stackBase);</span><br><span class="line">    <span class="keyword">if</span> (IsInvalidAddr(ulRbp, stackBegin, stackBase)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> stackDepth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> preUlRbp = ulRbp;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> instAddr = ulRbp + <span class="number">8</span>;</span><br><span class="line">        ulRbp = *(<span class="type">unsigned</span> <span class="type">long</span> *)ulRbp;</span><br><span class="line">        <span class="keyword">if</span> (IsInvalidAddr(instAddr, stackBegin, stackBase) </span><br><span class="line">            || IsInvalidAddr(ulRbp, preUlRbp, stackBase)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">array</span>[stackDepth] = *(<span class="type">unsigned</span> <span class="type">long</span> *)instAddr;</span><br><span class="line">        stackDepth++;</span><br><span class="line">    &#125; <span class="keyword">while</span>(stackDepth &lt; size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noinline <span class="type">void</span> <span class="title function_">FuncC</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *buffer;</span><br><span class="line">    <span class="type">int</span> size = <span class="number">4</span>;</span><br><span class="line">    buffer = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>) * size);</span><br><span class="line">    <span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;call malloc(%ld) failed\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>) * size);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="type">void</span>)BackTrace((<span class="type">void</span> **)&amp;buffer, size);</span><br><span class="line">    <span class="comment">// backtrace_symbols only works if link with -rdynamic</span></span><br><span class="line">    <span class="type">char</span> **symbolName = backtrace_symbols((<span class="type">void</span> *)buffer, size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&lt;------0x%016lx(%s)\n&quot;</span>, buffer[i], symbolName[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(buffer);</span><br><span class="line">    buffer = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noinline <span class="type">void</span> <span class="title function_">FuncB</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">    FuncC();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noinline <span class="type">void</span> <span class="title function_">FuncA</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    FuncB();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FuncA();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">zkq@ubuntu:src$ gcc backtrace.c -lpthread -rdynamic -m64 -fno-omit-frame-pointer -g -D_GNU_SOURCE -o backtrace</span><br><span class="line">zkq@ubuntu:src$ ./backtrace</span><br><span class="line">&lt;-----<span class="number">-0x00007fb4ffeab52a</span>(./backtrace(FuncC+<span class="number">0x6f</span>) [<span class="number">0x7fb4ffeab52a</span>])</span><br><span class="line">&lt;-----<span class="number">-0x00007fb4ffeab5d6</span>(./backtrace(FuncB+<span class="number">0x19</span>) [<span class="number">0x7fb4ffeab5d6</span>])</span><br><span class="line">&lt;-----<span class="number">-0x00007fb4ffeab5f2</span>(./backtrace(FuncA+<span class="number">0x19</span>) [<span class="number">0x7fb4ffeab5f2</span>])</span><br><span class="line">&lt;-----<span class="number">-0x00007fb4ffeab603</span>(./backtrace(main+<span class="number">0xe</span>) [<span class="number">0x7fb4ffeab603</span>])</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>x86_64推栈原理与实现2</title>
    <url>/zhoukaiqi/5402692fe700/</url>
    <content><![CDATA[<p>本文介绍了x86_64如何用rsp推栈。</p>
<span id="more"></span>
<h4 id="推栈原理-2">推栈原理</h4>
<p>x86_64如果显式加了编译选项<code>-fomit-frame-pointer</code>或者没有加编译选项<code>-fno-omit-frame-pointer</code>，会导致rbp不压栈，这里考虑用rsp推栈。rsp推栈主要原理依赖callq指令。</p>
<p><font color="#FF0000"> <strong>callq addr的具体实现</strong> </font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">rsp = rsp - <span class="number">8</span></span><br><span class="line">*(<span class="type">unsigned</span> <span class="type">long</span>*)rsp = rip + <span class="keyword">sizeof</span>(inst)</span><br><span class="line">rip = addr</span><br></pre></td></tr></table></figure>
<p>根据callq的实现机制，可以得到推栈公式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">rip = *(<span class="type">unsigned</span> <span class="type">long</span>*)(rsp + 当前函数开栈大小)  <span class="comment">// rip是上一个函数的地址</span></span><br><span class="line">rsp = rsp + 当前函数开栈大小 + <span class="number">8</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数开栈大小：<font color="#FF0000">push指令占8字节，sub xxx rsp指令占xxx字节，即操作rsp的指令</font></p>
</blockquote>
<h4 id="推栈演示">推栈演示</h4>
<p>以下代码为例，编译命令是<code>gcc test.c -fomit-frame-pointer -g -o test</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> noinline __attribute__((noinline))</span></span><br><span class="line"></span><br><span class="line">noinline <span class="type">void</span> <span class="title function_">FuncD</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noinline <span class="type">void</span> <span class="title function_">FuncC</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b = x;</span><br><span class="line">    FuncD(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noinline <span class="type">void</span> <span class="title function_">FuncB</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b = x;</span><br><span class="line">    FuncC(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noinline <span class="type">void</span> <span class="title function_">FuncA</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b = x + <span class="number">2</span>;</span><br><span class="line">    FuncB(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FuncA(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.当代码执行到<code>FuncD</code>函数时，开栈大小是0x38(<code>sub    $0x38,%rsp</code>，没有push指令)</p>
<p>所以<code>rip = *(unsigned long*)(0x7ffffffedef0 + 0x38) = 0x080011c9</code>，即&lt;FuncC+60&gt;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Breakpoint 1, FuncD (x=4) at backtrace_rsp.c:6</span><br><span class="line">6       &#123;</span><br><span class="line">(gdb) disassemble FuncD</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> FuncD:</span><br><span class="line">   0x0000000008001149 &lt;+0&gt;:     sub    <span class="variable">$0x38</span>,%rsp</span><br><span class="line">   0x000000000800114d &lt;+4&gt;:     mov    %edi,0xc(%rsp)</span><br><span class="line">=&gt; 0x0000000008001151 &lt;+8&gt;:     mov    %fs:0x28,%rax</span><br><span class="line">   0x000000000800115a &lt;+17&gt;:    mov    %rax,0x28(%rsp)</span><br><span class="line">   0x000000000800115f &lt;+22&gt;:    xor    %eax,%eax</span><br><span class="line">   0x0000000008001161 &lt;+24&gt;:    movq   <span class="variable">$0x0</span>,0x20(%rsp)</span><br><span class="line">   0x000000000800116a &lt;+33&gt;:    mov    0xc(%rsp),%eax</span><br><span class="line">   0x000000000800116e &lt;+37&gt;:    mov    %eax,0x1c(%rsp)</span><br><span class="line">   0x0000000008001172 &lt;+41&gt;:    nop</span><br><span class="line">   0x0000000008001173 &lt;+42&gt;:    mov    0x28(%rsp),%rax</span><br><span class="line">   0x0000000008001178 &lt;+47&gt;:    xor    %fs:0x28,%rax</span><br><span class="line">   0x0000000008001181 &lt;+56&gt;:    je     0x8001188 &lt;FuncD+63&gt;</span><br><span class="line">   0x0000000008001183 &lt;+58&gt;:    callq  0x8001050 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">   0x0000000008001188 &lt;+63&gt;:    add    <span class="variable">$0x38</span>,%rsp</span><br><span class="line">   0x000000000800118c &lt;+67&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) i r rsp</span><br><span class="line">rsp            0x7ffffffedef0      0x7ffffffedef0</span><br><span class="line">(gdb) p/x 0x7ffffffedef0 + 0x38</span><br><span class="line"><span class="variable">$1</span> = 0x7ffffffedf28</span><br><span class="line">(gdb) x/16wx <span class="variable">$rsp</span></span><br><span class="line">0x7ffffffedef0: 0x00000380      0x00000380      0x00000380      0x00000004</span><br><span class="line">0x7ffffffedf00: 0x00000380      0x00000380      0x00000380      0x00000380</span><br><span class="line">0x7ffffffedf10: 0x00000380      0x00000380      0x00000380      0x00000380</span><br><span class="line">0x7ffffffedf20: 0x00000380      0x00000380      0x080011c9      0x00000000</span><br><span class="line">(gdb) x 0x080011c9</span><br><span class="line">0x80011c9 &lt;FuncC+60&gt;:   0x448b4890</span><br></pre></td></tr></table></figure>
<p>推完一层栈后，<code>rsp = 0x7ffffffedef0 + 0x38 + 8 = 0x7ffffffedf30</code></p>
<p>2.当代码执行到<code>FuncC</code>函数时，开栈大小是0x38(<code>sub    $0x38,%rsp</code>)</p>
<p>所以<code>rip = *(unsigned long*)(0x7ffffffedf30 + 0x38) = 0x08001221</code>，即&lt;FuncB+61&gt;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncC</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> FuncC:</span><br><span class="line">   0x000000000800118d &lt;+0&gt;:     sub    <span class="variable">$0x38</span>,%rsp</span><br><span class="line">   0x0000000008001191 &lt;+4&gt;:     mov    %edi,0xc(%rsp)</span><br><span class="line">   0x0000000008001195 &lt;+8&gt;:     mov    %fs:0x28,%rax</span><br><span class="line">   0x000000000800119e &lt;+17&gt;:    mov    %rax,0x28(%rsp)</span><br><span class="line">   0x00000000080011a3 &lt;+22&gt;:    xor    %eax,%eax</span><br><span class="line">   0x00000000080011a5 &lt;+24&gt;:    movq   <span class="variable">$0x0</span>,0x1c(%rsp)</span><br><span class="line">   0x00000000080011ae &lt;+33&gt;:    movl   <span class="variable">$0x0</span>,0x24(%rsp)</span><br><span class="line">   0x00000000080011b6 &lt;+41&gt;:    mov    0xc(%rsp),%eax</span><br><span class="line">   0x00000000080011ba &lt;+45&gt;:    mov    %eax,0x18(%rsp)</span><br><span class="line">   0x00000000080011be &lt;+49&gt;:    mov    0x18(%rsp),%eax</span><br><span class="line">   0x00000000080011c2 &lt;+53&gt;:    mov    %eax,%edi</span><br><span class="line">   0x00000000080011c4 &lt;+55&gt;:    callq  0x8001149 &lt;FuncD&gt;</span><br><span class="line">   0x00000000080011c9 &lt;+60&gt;:    nop</span><br><span class="line">   0x00000000080011ca &lt;+61&gt;:    mov    0x28(%rsp),%rax</span><br><span class="line">   0x00000000080011cf &lt;+66&gt;:    xor    %fs:0x28,%rax</span><br><span class="line">   0x00000000080011d8 &lt;+75&gt;:    je     0x80011df &lt;FuncC+82&gt;</span><br><span class="line">   0x00000000080011da &lt;+77&gt;:    callq  0x8001050 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">   0x00000000080011df &lt;+82&gt;:    add    <span class="variable">$0x38</span>,%rsp</span><br><span class="line">   0x00000000080011e3 &lt;+86&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) p/x 0x7ffffffedf30 + 0x38</span><br><span class="line"><span class="variable">$5</span> = 0x7ffffffedf68</span><br><span class="line">(gdb) x/16wx 0x7ffffffedf30</span><br><span class="line">0x7ffffffedf30: 0x00000380      0x00000380      0x00000380      0x00000004</span><br><span class="line">0x7ffffffedf40: 0x00000380      0x00000380      0x00000004      0x00000000</span><br><span class="line">0x7ffffffedf50: 0x00000000      0x00000000      0x41fe1c00      0x9710ef65</span><br><span class="line">0x7ffffffedf60: 0x00000000      0x00000000      0x08001221      0x00000000</span><br><span class="line">(gdb) x 0x08001221</span><br><span class="line">0x8001221 &lt;FuncB+61&gt;:   0x448b4890</span><br></pre></td></tr></table></figure>
<p>推完一层栈后，<code>rsp = 0x7ffffffedf30 + 0x38 + 8 = 0x7ffffffedf70</code></p>
<p>3.当代码执行到<code>FuncB</code>函数时，开栈大小是0x48(<code>sub    $0x48,%rsp</code>)</p>
<p>所以<code>rip = *(unsigned long*)(0x7ffffffedf70 + 0x48) = 0x08001284</code>，即&lt;FuncA+72&gt;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncB</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> FuncB:</span><br><span class="line">   0x00000000080011e4 &lt;+0&gt;:     sub    <span class="variable">$0x48</span>,%rsp</span><br><span class="line">   0x00000000080011e8 &lt;+4&gt;:     mov    %edi,0xc(%rsp)</span><br><span class="line">   0x00000000080011ec &lt;+8&gt;:     mov    %fs:0x28,%rax</span><br><span class="line">   0x00000000080011f5 &lt;+17&gt;:    mov    %rax,0x38(%rsp)</span><br><span class="line">   0x00000000080011fa &lt;+22&gt;:    xor    %eax,%eax</span><br><span class="line">   0x00000000080011fc &lt;+24&gt;:    movq   <span class="variable">$0x0</span>,0x20(%rsp)</span><br><span class="line">   0x0000000008001205 &lt;+33&gt;:    movq   <span class="variable">$0x0</span>,0x28(%rsp)</span><br><span class="line">   0x000000000800120e &lt;+42&gt;:    mov    0xc(%rsp),%eax</span><br><span class="line">   0x0000000008001212 &lt;+46&gt;:    mov    %eax,0x1c(%rsp)</span><br><span class="line">   0x0000000008001216 &lt;+50&gt;:    mov    0x1c(%rsp),%eax</span><br><span class="line">   0x000000000800121a &lt;+54&gt;:    mov    %eax,%edi</span><br><span class="line">   0x000000000800121c &lt;+56&gt;:    callq  0x800118d &lt;FuncC&gt;</span><br><span class="line">   0x0000000008001221 &lt;+61&gt;:    nop</span><br><span class="line">   0x0000000008001222 &lt;+62&gt;:    mov    0x38(%rsp),%rax</span><br><span class="line">   0x0000000008001227 &lt;+67&gt;:    xor    %fs:0x28,%rax</span><br><span class="line">   0x0000000008001230 &lt;+76&gt;:    je     0x8001237 &lt;FuncB+83&gt;</span><br><span class="line">   0x0000000008001232 &lt;+78&gt;:    callq  0x8001050 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">   0x0000000008001237 &lt;+83&gt;:    add    <span class="variable">$0x48</span>,%rsp</span><br><span class="line">   0x000000000800123b &lt;+87&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) p/x 0x7ffffffedf70 + 0x48</span><br><span class="line"><span class="variable">$6</span> = 0x7ffffffedfb8</span><br><span class="line">(gdb) x/20wx 0x7ffffffedf70</span><br><span class="line">0x7ffffffedf70: 0x00000000      0x00000000      0x00000000      0x00000004</span><br><span class="line">0x7ffffffedf80: 0x00000000      0x00000000      0x00000000      0x00000004</span><br><span class="line">0x7ffffffedf90: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7ffffffedfa0: 0x00000000      0x00000000      0x41fe1c00      0x9710ef65</span><br><span class="line">0x7ffffffedfb0: 0x08000040      0x00000000      0x08001284      0x00000000</span><br><span class="line">(gdb) x 0x08001284</span><br><span class="line">0x8001284 &lt;FuncA+72&gt;:   0x448b4890</span><br></pre></td></tr></table></figure>
<p>推完一层栈后，<code>rsp = 0x7ffffffedf70 + 0x48 + 8 = 0x7ffffffedfc0</code></p>
<p>4.当代码执行到<code>FuncA</code>函数时，开栈大小是0x48(<code>sub    $0x48,%rsp</code>)</p>
<p>所以<code>rip = *(unsigned long*)(0x7ffffffedfc0 + 0x48) = 0x08001284</code>，即&lt;main+14&gt;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble FuncA</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> FuncA:</span><br><span class="line">   0x000000000800123c &lt;+0&gt;:     sub    <span class="variable">$0x48</span>,%rsp</span><br><span class="line">   0x0000000008001240 &lt;+4&gt;:     mov    %edi,0xc(%rsp)</span><br><span class="line">   0x0000000008001244 &lt;+8&gt;:     mov    %fs:0x28,%rax</span><br><span class="line">   0x000000000800124d &lt;+17&gt;:    mov    %rax,0x38(%rsp)</span><br><span class="line">   0x0000000008001252 &lt;+22&gt;:    xor    %eax,%eax</span><br><span class="line">   0x0000000008001254 &lt;+24&gt;:    movq   <span class="variable">$0x0</span>,0x20(%rsp)</span><br><span class="line">   0x000000000800125d &lt;+33&gt;:    movq   <span class="variable">$0x0</span>,0x28(%rsp)</span><br><span class="line">   0x0000000008001266 &lt;+42&gt;:    movl   <span class="variable">$0x0</span>,0x30(%rsp)</span><br><span class="line">   0x000000000800126e &lt;+50&gt;:    mov    0xc(%rsp),%eax</span><br><span class="line">   0x0000000008001272 &lt;+54&gt;:    add    <span class="variable">$0x2</span>,%eax</span><br><span class="line">   0x0000000008001275 &lt;+57&gt;:    mov    %eax,0x1c(%rsp)</span><br><span class="line">   0x0000000008001279 &lt;+61&gt;:    mov    0x1c(%rsp),%eax</span><br><span class="line">   0x000000000800127d &lt;+65&gt;:    mov    %eax,%edi</span><br><span class="line">   0x000000000800127f &lt;+67&gt;:    callq  0x80011e4 &lt;FuncB&gt;</span><br><span class="line">   0x0000000008001284 &lt;+72&gt;:    nop</span><br><span class="line">   0x0000000008001285 &lt;+73&gt;:    mov    0x38(%rsp),%rax</span><br><span class="line">   0x000000000800128a &lt;+78&gt;:    xor    %fs:0x28,%rax</span><br><span class="line">   0x0000000008001293 &lt;+87&gt;:    je     0x800129a &lt;FuncA+94&gt;</span><br><span class="line">   0x0000000008001295 &lt;+89&gt;:    callq  0x8001050 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">   0x000000000800129a &lt;+94&gt;:    add    <span class="variable">$0x48</span>,%rsp</span><br><span class="line">   0x000000000800129e &lt;+98&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) p/x 0x7ffffffedfc0 + 0x48</span><br><span class="line"><span class="variable">$8</span> = 0x7ffffffee008</span><br><span class="line">(gdb) x/20wx 0x7ffffffedfc0</span><br><span class="line">0x7ffffffedfc0: 0x000000c2      0x00000000      0xfffedff7      0x00000002</span><br><span class="line">0x7ffffffedfd0: 0xfffedff6      0x00007fff      0x0800130d      0x00000004</span><br><span class="line">0x7ffffffedfe0: 0x00000000      0x00000000      0x00000000      0x00000000</span><br><span class="line">0x7ffffffedff0: 0x00000000      0x00000000      0x41fe1c00      0x9710ef65</span><br><span class="line">0x7ffffffee000: 0xfffee100      0x00007fff      0x080012ad      0x00000000</span><br><span class="line">(gdb) x 0x080012ad</span><br><span class="line">0x80012ad &lt;main+14&gt;:    0x000000b8</span><br></pre></td></tr></table></figure>
<p>即推栈结果是<code>&lt;FuncC+60&gt; &lt;-- &lt;FuncB+61&gt; &lt;-- &lt;FuncA+72&gt; &lt;-- &lt;main+14&gt;</code>，与gdb的bt推栈结果完全一致。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">#<span class="number">0</span>  FuncD ()</span><br><span class="line">#<span class="number">1</span>  <span class="number">0x00000000080011c9</span> in <span class="title function_">FuncC</span> <span class="params">()</span> </span><br><span class="line">#2  0x0000000008001221 in <span class="title function_">FuncB</span> <span class="params">()</span> </span><br><span class="line">#3  0x0000000008001284 in <span class="title function_">FuncA</span> <span class="params">()</span> </span><br><span class="line">#4  0x00000000080012ad in <span class="title function_">main</span> <span class="params">()</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
